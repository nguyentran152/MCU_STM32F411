 /*
 * main.c
 *
 *  Created on: Mar 19, 2023
 *      Author: Nguyen Tran
 */


#include "main.h"
#include <string.h>
#include <stdio.h>


void Error_Handler(void);
void GPIO_Init(void);
void UART2_Init(void);
void GPIO_Analog_Config(void);

extern uint8_t somedata[];
UART_HandleTypeDef huart2;

int main()
{
	HAL_Init();
	HAL_MspInit();
	GPIO_Init();
	/* Keep unused pins in the analog mode to reduce the power consumption */
	GPIO_Analog_Config();
	UART2_Init();

	char msg[50];

	while(1)
	{
		if ( HAL_UART_Transmit(&huart2,(uint8_t*)somedata,(uint16_t)strlen((char*)somedata),HAL_MAX_DELAY) != HAL_OK)
		{
			Error_Handler();
		}

		memset(msg,0,sizeof(msg));
		sprintf(msg,"Going to Sleep !\r\n");
		HAL_UART_Transmit(&huart2,(uint8_t*)msg,(uint16_t)strlen((char*)msg),HAL_MAX_DELAY);

		/* Systick is not required so disabled it before going to sleep*/
		HAL_SuspendTick();

		/* going to sleep here */
		__WFE();

		/* Continues from here when wakes up */
		/* Enable the Systick */
		HAL_ResumeTick();

		memset(msg,0,sizeof(msg));
		sprintf(msg,"Woke up !\r\n");
		HAL_UART_Transmit(&huart2,(uint8_t*)msg,(uint16_t)strlen((char*)msg),HAL_MAX_DELAY);
	}
	return 0;
}



void GPIO_Init(void)
{
    __HAL_RCC_GPIOA_CLK_ENABLE();

	GPIO_InitTypeDef buttonpin;
	buttonpin.Pin = GPIO_PIN_0;
	buttonpin.Mode = GPIO_MODE_EVT_FALLING;
	buttonpin.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA,&buttonpin);
}

void GPIO_Analog_Config(void)
{
	GPIO_InitTypeDef gpioA;
	uint32_t gpio_pins = 	GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | \
							GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
							GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;

	gpioA.Pin = gpio_pins;
	gpioA.Mode = GPIO_MODE_ANALOG;
	HAL_GPIO_Init(GPIOA, &gpioA);
}

void UART2_Init(void)
{
	huart2.Instance = USART2;
	huart2.Init.BaudRate = 230400; //increase uart baudrate to reduce the power consumption
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
	if(HAL_UART_Init(&huart2) != HAL_OK)
	{
		Error_Handler();
	}
}





void Error_Handler(void)
{
	while(1);
}

