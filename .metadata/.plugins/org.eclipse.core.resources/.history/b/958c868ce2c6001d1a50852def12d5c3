
TIMER_UART_SLEEPONEXIT_LOW_POWER_MODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023f4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  0800258c  0800258c  0001258c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002594  08002594  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08002594  08002594  00012594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800259c  0800259c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800259c  0800259c  0001259c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025a0  080025a0  000125a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080025a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000002c  080025d0  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  080025d0  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9d9  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cc5  00000000  00000000  0002da35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  0002f700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000162a6  00000000  00000000  00030360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000e266  00000000  00000000  00046606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008cfba  00000000  00000000  0005486c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000e1826  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000ba0  00000000  00000000  000e1878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000033a0  00000000  00000000  000e2418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000002c 	.word	0x2000002c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002574 	.word	0x08002574

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000030 	.word	0x20000030
 80001d4:	08002574 	.word	0x08002574

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b974 	b.w	80004e8 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468e      	mov	lr, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14d      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000226:	428a      	cmp	r2, r1
 8000228:	4694      	mov	ip, r2
 800022a:	d969      	bls.n	8000300 <__udivmoddi4+0xe8>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b152      	cbz	r2, 8000248 <__udivmoddi4+0x30>
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	f1c2 0120 	rsb	r1, r2, #32
 800023a:	fa20 f101 	lsr.w	r1, r0, r1
 800023e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000242:	ea41 0e03 	orr.w	lr, r1, r3
 8000246:	4094      	lsls	r4, r2
 8000248:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800024c:	0c21      	lsrs	r1, r4, #16
 800024e:	fbbe f6f8 	udiv	r6, lr, r8
 8000252:	fa1f f78c 	uxth.w	r7, ip
 8000256:	fb08 e316 	mls	r3, r8, r6, lr
 800025a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025e:	fb06 f107 	mul.w	r1, r6, r7
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 811f 	bcs.w	80004b0 <__udivmoddi4+0x298>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 811c 	bls.w	80004b0 <__udivmoddi4+0x298>
 8000278:	3e02      	subs	r6, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 f707 	mul.w	r7, r0, r7
 8000290:	42a7      	cmp	r7, r4
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x92>
 8000294:	eb1c 0404 	adds.w	r4, ip, r4
 8000298:	f100 33ff 	add.w	r3, r0, #4294967295
 800029c:	f080 810a 	bcs.w	80004b4 <__udivmoddi4+0x29c>
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	f240 8107 	bls.w	80004b4 <__udivmoddi4+0x29c>
 80002a6:	4464      	add	r4, ip
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ae:	1be4      	subs	r4, r4, r7
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa4>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xc2>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80ef 	beq.w	80004aa <__udivmoddi4+0x292>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x160>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd4>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80f9 	bhi.w	80004de <__udivmoddi4+0x2c6>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa4>
 80002fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa4>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xec>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 8092 	bne.w	8000432 <__udivmoddi4+0x21a>
 800030e:	eba1 010c 	sub.w	r1, r1, ip
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2601      	movs	r6, #1
 800031c:	0c20      	lsrs	r0, r4, #16
 800031e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000322:	fb07 1113 	mls	r1, r7, r3, r1
 8000326:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032a:	fb0e f003 	mul.w	r0, lr, r3
 800032e:	4288      	cmp	r0, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x12c>
 8000332:	eb1c 0101 	adds.w	r1, ip, r1
 8000336:	f103 38ff 	add.w	r8, r3, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x12a>
 800033c:	4288      	cmp	r0, r1
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000342:	4643      	mov	r3, r8
 8000344:	1a09      	subs	r1, r1, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb1 f0f7 	udiv	r0, r1, r7
 800034c:	fb07 1110 	mls	r1, r7, r0, r1
 8000350:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x156>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 31ff 	add.w	r1, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x154>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2ca>
 800036c:	4608      	mov	r0, r1
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000376:	e79c      	b.n	80002b2 <__udivmoddi4+0x9a>
 8000378:	f1c6 0720 	rsb	r7, r6, #32
 800037c:	40b3      	lsls	r3, r6
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa20 f407 	lsr.w	r4, r0, r7
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	431c      	orrs	r4, r3
 8000390:	40f9      	lsrs	r1, r7
 8000392:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000396:	fa00 f306 	lsl.w	r3, r0, r6
 800039a:	fbb1 f8f9 	udiv	r8, r1, r9
 800039e:	0c20      	lsrs	r0, r4, #16
 80003a0:	fa1f fe8c 	uxth.w	lr, ip
 80003a4:	fb09 1118 	mls	r1, r9, r8, r1
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	fb08 f00e 	mul.w	r0, r8, lr
 80003b0:	4288      	cmp	r0, r1
 80003b2:	fa02 f206 	lsl.w	r2, r2, r6
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b8>
 80003b8:	eb1c 0101 	adds.w	r1, ip, r1
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2bc>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2bc>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4461      	add	r1, ip
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d8:	fb09 1110 	mls	r1, r9, r0, r1
 80003dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	458e      	cmp	lr, r1
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1e2>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2b4>
 80003f2:	458e      	cmp	lr, r1
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2b4>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4461      	add	r1, ip
 80003fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000402:	eba1 010e 	sub.w	r1, r1, lr
 8000406:	42a1      	cmp	r1, r4
 8000408:	46c8      	mov	r8, r9
 800040a:	46a6      	mov	lr, r4
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x2a4>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x2a0>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x212>
 8000412:	ebb3 0208 	subs.w	r2, r3, r8
 8000416:	eb61 010e 	sbc.w	r1, r1, lr
 800041a:	fa01 f707 	lsl.w	r7, r1, r7
 800041e:	fa22 f306 	lsr.w	r3, r2, r6
 8000422:	40f1      	lsrs	r1, r6
 8000424:	431f      	orrs	r7, r3
 8000426:	e9c5 7100 	strd	r7, r1, [r5]
 800042a:	2600      	movs	r6, #0
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	f1c2 0320 	rsb	r3, r2, #32
 8000436:	40d8      	lsrs	r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa21 f303 	lsr.w	r3, r1, r3
 8000440:	4091      	lsls	r1, r2
 8000442:	4301      	orrs	r1, r0
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000450:	fb07 3610 	mls	r6, r7, r0, r3
 8000454:	0c0b      	lsrs	r3, r1, #16
 8000456:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045a:	fb00 f60e 	mul.w	r6, r0, lr
 800045e:	429e      	cmp	r6, r3
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x260>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b8>
 8000470:	429e      	cmp	r6, r3
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b8>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1b9b      	subs	r3, r3, r6
 800047a:	b289      	uxth	r1, r1
 800047c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000480:	fb07 3316 	mls	r3, r7, r6, r3
 8000484:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000488:	fb06 f30e 	mul.w	r3, r6, lr
 800048c:	428b      	cmp	r3, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x28a>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f106 38ff 	add.w	r8, r6, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 800049a:	428b      	cmp	r3, r1
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800049e:	3e02      	subs	r6, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0x104>
 80004aa:	462e      	mov	r6, r5
 80004ac:	4628      	mov	r0, r5
 80004ae:	e705      	b.n	80002bc <__udivmoddi4+0xa4>
 80004b0:	4606      	mov	r6, r0
 80004b2:	e6e3      	b.n	800027c <__udivmoddi4+0x64>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6f8      	b.n	80002aa <__udivmoddi4+0x92>
 80004b8:	454b      	cmp	r3, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f8>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c4:	3801      	subs	r0, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f8>
 80004c8:	4646      	mov	r6, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x28a>
 80004cc:	4620      	mov	r0, r4
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1e2>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x260>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b8>
 80004d8:	3b02      	subs	r3, #2
 80004da:	4461      	add	r1, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x12c>
 80004de:	4630      	mov	r0, r6
 80004e0:	e709      	b.n	80002f6 <__udivmoddi4+0xde>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x156>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <SysTick_Handler>:

extern TIM_HandleTypeDef htimer10;
extern UART_HandleTypeDef huart2;

void SysTick_Handler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80004f0:	f000 f9e0 	bl	80008b4 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80004f4:	f000 fb0f 	bl	8000b16 <HAL_SYSTICK_IRQHandler>
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler()
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000500:	2201      	movs	r2, #1
 8000502:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000506:	4807      	ldr	r0, [pc, #28]	; (8000524 <TIM1_UP_TIM10_IRQHandler+0x28>)
 8000508:	f000 fd28 	bl	8000f5c <HAL_GPIO_WritePin>
	HAL_TIM_IRQHandler(&htimer10);
 800050c:	4806      	ldr	r0, [pc, #24]	; (8000528 <TIM1_UP_TIM10_IRQHandler+0x2c>)
 800050e:	f000 fe35 	bl	800117c <HAL_TIM_IRQHandler>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000518:	4802      	ldr	r0, [pc, #8]	; (8000524 <TIM1_UP_TIM10_IRQHandler+0x28>)
 800051a:	f000 fd1f 	bl	8000f5c <HAL_GPIO_WritePin>
}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40020c00 	.word	0x40020c00
 8000528:	20000048 	.word	0x20000048

0800052c <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8000530:	4802      	ldr	r0, [pc, #8]	; (800053c <USART2_IRQHandler+0x10>)
 8000532:	f001 f8c7 	bl	80016c4 <HAL_UART_IRQHandler>
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000090 	.word	0x20000090

08000540 <main>:
UART_HandleTypeDef huart2;
extern uint8_t somedata[];


int main()
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	HAL_Init();
 8000544:	f000 f964 	bl	8000810 <HAL_Init>
	GPIO_Init();
 8000548:	f000 f812 	bl	8000570 <GPIO_Init>
	UART2_Init();
 800054c:	f000 f854 	bl	80005f8 <UART2_Init>
	TIMER10_Init();
 8000550:	f000 f834 	bl	80005bc <TIMER10_Init>


	//enable sleep on exit
	HAL_PWR_EnableSleepOnExit();
 8000554:	f000 fd1c 	bl	8000f90 <HAL_PWR_EnableSleepOnExit>

	TIM10->SR = 0; //clc
 8000558:	4b03      	ldr	r3, [pc, #12]	; (8000568 <main+0x28>)
 800055a:	2200      	movs	r2, #0
 800055c:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htimer10);
 800055e:	4803      	ldr	r0, [pc, #12]	; (800056c <main+0x2c>)
 8000560:	f000 fdaa 	bl	80010b8 <HAL_TIM_Base_Start_IT>


	while(1);
 8000564:	e7fe      	b.n	8000564 <main+0x24>
 8000566:	bf00      	nop
 8000568:	40014400 	.word	0x40014400
 800056c:	20000048 	.word	0x20000048

08000570 <GPIO_Init>:
}



void GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	603b      	str	r3, [r7, #0]
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <GPIO_Init+0x44>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a0d      	ldr	r2, [pc, #52]	; (80005b4 <GPIO_Init+0x44>)
 8000580:	f043 0308 	orr.w	r3, r3, #8
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <GPIO_Init+0x44>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f003 0308 	and.w	r3, r3, #8
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_12;
 8000592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000596:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000598:	2301      	movs	r3, #1
 800059a:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD,&ledgpio);
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	4619      	mov	r1, r3
 80005a4:	4804      	ldr	r0, [pc, #16]	; (80005b8 <GPIO_Init+0x48>)
 80005a6:	f000 fb55 	bl	8000c54 <HAL_GPIO_Init>
}
 80005aa:	bf00      	nop
 80005ac:	3718      	adds	r7, #24
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40020c00 	.word	0x40020c00

080005bc <TIMER10_Init>:

/*
 * Time base 10ms
 */
void TIMER10_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	htimer10.Instance = TIM10;
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <TIMER10_Init+0x34>)
 80005c2:	4a0c      	ldr	r2, [pc, #48]	; (80005f4 <TIMER10_Init+0x38>)
 80005c4:	601a      	str	r2, [r3, #0]
	htimer10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c6:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <TIMER10_Init+0x34>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
	htimer10.Init.Prescaler = 4999;
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <TIMER10_Init+0x34>)
 80005ce:	f241 3287 	movw	r2, #4999	; 0x1387
 80005d2:	605a      	str	r2, [r3, #4]
	htimer10.Init.Period = 31;
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <TIMER10_Init+0x34>)
 80005d6:	221f      	movs	r2, #31
 80005d8:	60da      	str	r2, [r3, #12]

	if(HAL_TIM_Base_Init(&htimer10) != HAL_OK)
 80005da:	4805      	ldr	r0, [pc, #20]	; (80005f0 <TIMER10_Init+0x34>)
 80005dc:	f000 fd1c 	bl	8001018 <HAL_TIM_Base_Init>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <TIMER10_Init+0x2e>
	{
		Error_Handler();
 80005e6:	f000 f849 	bl	800067c <Error_Handler>
	}
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000048 	.word	0x20000048
 80005f4:	40014400 	.word	0x40014400

080005f8 <UART2_Init>:

void UART2_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <UART2_Init+0x44>)
 80005fe:	4a10      	ldr	r2, [pc, #64]	; (8000640 <UART2_Init+0x48>)
 8000600:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <UART2_Init+0x44>)
 8000604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000608:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <UART2_Init+0x44>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <UART2_Init+0x44>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <UART2_Init+0x44>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <UART2_Init+0x44>)
 800061e:	2200      	movs	r2, #0
 8000620:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <UART2_Init+0x44>)
 8000624:	220c      	movs	r2, #12
 8000626:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&huart2) != HAL_OK)
 8000628:	4804      	ldr	r0, [pc, #16]	; (800063c <UART2_Init+0x44>)
 800062a:	f000 ff6b 	bl	8001504 <HAL_UART_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <UART2_Init+0x40>
	{
		Error_Handler();
 8000634:	f000 f822 	bl	800067c <Error_Handler>
	}
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000090 	.word	0x20000090
 8000640:	40004400 	.word	0x40004400

08000644 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	if(HAL_UART_Transmit(&huart2, (uint8_t*)somedata, (uint16_t)strlen((char*)somedata), HAL_MAX_DELAY) != HAL_OK)
 800064c:	4809      	ldr	r0, [pc, #36]	; (8000674 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800064e:	f7ff fdc3 	bl	80001d8 <strlen>
 8000652:	4603      	mov	r3, r0
 8000654:	b29a      	uxth	r2, r3
 8000656:	f04f 33ff 	mov.w	r3, #4294967295
 800065a:	4906      	ldr	r1, [pc, #24]	; (8000674 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800065c:	4806      	ldr	r0, [pc, #24]	; (8000678 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800065e:	f000 ff9e 	bl	800159e <HAL_UART_Transmit>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		Error_Handler();
 8000668:	f000 f808 	bl	800067c <Error_Handler>
	}
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000000 	.word	0x20000000
 8000678:	20000090 	.word	0x20000090

0800067c <Error_Handler>:

void Error_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
	while(1);
 8000680:	e7fe      	b.n	8000680 <Error_Handler+0x4>
	...

08000684 <HAL_MspInit>:

#include "main.h"


void HAL_MspInit(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	//Low level processor specific inits
	//1. Set up the priority grouping of the arm cortex Mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000688:	2003      	movs	r0, #3
 800068a:	f000 fa03 	bl	8000a94 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the require system exceptions of the arm cortex Mx processor
	//system control block -> System handler control and state register
	SCB->SHCSR |= 0x7 << 16; //usage, bus, memory fault system exceptions
 800068e:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <HAL_MspInit+0x40>)
 8000690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000692:	4a0c      	ldr	r2, [pc, #48]	; (80006c4 <HAL_MspInit+0x40>)
 8000694:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000698:	6253      	str	r3, [r2, #36]	; 0x24

	//3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	f06f 000b 	mvn.w	r0, #11
 80006a2:	f000 fa02 	bl	8000aaa <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2100      	movs	r1, #0
 80006aa:	f06f 000a 	mvn.w	r0, #10
 80006ae:	f000 f9fc 	bl	8000aaa <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2100      	movs	r1, #0
 80006b6:	f06f 0009 	mvn.w	r0, #9
 80006ba:	f000 f9f6 	bl	8000aaa <HAL_NVIC_SetPriority>
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	//1. Enable the clock for timer 10 peripheral
	__HAL_RCC_TIM10_CLK_ENABLE();
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <HAL_TIM_Base_MspInit+0x3c>)
 80006d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d8:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <HAL_TIM_Base_MspInit+0x3c>)
 80006da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006de:	6453      	str	r3, [r2, #68]	; 0x44
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <HAL_TIM_Base_MspInit+0x3c>)
 80006e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]

	//2. Enable the IRQ of timer 10
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80006ec:	2019      	movs	r0, #25
 80006ee:	f000 f9f8 	bl	8000ae2 <HAL_NVIC_EnableIRQ>

	//3. set up priority
	HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	210f      	movs	r1, #15
 80006f6:	2019      	movs	r0, #25
 80006f8:	f000 f9d7 	bl	8000aaa <HAL_NVIC_SetPriority>
}
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40023800 	.word	0x40023800

08000708 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *huart2)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	; 0x28
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;

	//Low level inits for UART2 Peripheral
	//1. Enable the clock for the UART2 and GPIO peripheral
	__HAL_RCC_USART2_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <HAL_UART_MspInit+0x88>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	4a1d      	ldr	r2, [pc, #116]	; (8000790 <HAL_UART_MspInit+0x88>)
 800071a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800071e:	6413      	str	r3, [r2, #64]	; 0x40
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <HAL_UART_MspInit+0x88>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000728:	613b      	str	r3, [r7, #16]
 800072a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <HAL_UART_MspInit+0x88>)
 8000732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000734:	4a16      	ldr	r2, [pc, #88]	; (8000790 <HAL_UART_MspInit+0x88>)
 8000736:	f043 0301 	orr.w	r3, r3, #1
 800073a:	6313      	str	r3, [r2, #48]	; 0x30
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <HAL_UART_MspInit+0x88>)
 800073e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000740:	f003 0301 	and.w	r3, r3, #1
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	68fb      	ldr	r3, [r7, #12]
	//2. The pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2; //UART2_TX
 8000748:	2304      	movs	r3, #4
 800074a:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 800074c:	2302      	movs	r3, #2
 800074e:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 8000750:	2301      	movs	r3, #1
 8000752:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FAST;
 8000754:	2302      	movs	r3, #2
 8000756:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;
 8000758:	2307      	movs	r3, #7
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4619      	mov	r1, r3
 8000762:	480c      	ldr	r0, [pc, #48]	; (8000794 <HAL_UART_MspInit+0x8c>)
 8000764:	f000 fa76 	bl	8000c54 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8000768:	2308      	movs	r3, #8
 800076a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	4619      	mov	r1, r3
 8000772:	4808      	ldr	r0, [pc, #32]	; (8000794 <HAL_UART_MspInit+0x8c>)
 8000774:	f000 fa6e 	bl	8000c54 <HAL_GPIO_Init>
	//3. Enable the IRQ and set up the priority (NVIC Settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000778:	2026      	movs	r0, #38	; 0x26
 800077a:	f000 f9b2 	bl	8000ae2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	210f      	movs	r1, #15
 8000782:	2026      	movs	r0, #38	; 0x26
 8000784:	f000 f991 	bl	8000aaa <HAL_NVIC_SetPriority>
}
 8000788:	bf00      	nop
 800078a:	3728      	adds	r7, #40	; 0x28
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40020000 	.word	0x40020000

08000798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <SystemInit+0x20>)
 800079e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007a2:	4a05      	ldr	r2, [pc, #20]	; (80007b8 <SystemInit+0x20>)
 80007a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80007bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007c2:	490e      	ldr	r1, [pc, #56]	; (80007fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007c4:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c8:	e002      	b.n	80007d0 <LoopCopyDataInit>

080007ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ce:	3304      	adds	r3, #4

080007d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d4:	d3f9      	bcc.n	80007ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d6:	4a0b      	ldr	r2, [pc, #44]	; (8000804 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007d8:	4c0b      	ldr	r4, [pc, #44]	; (8000808 <LoopFillZerobss+0x26>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007dc:	e001      	b.n	80007e2 <LoopFillZerobss>

080007de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e0:	3204      	adds	r2, #4

080007e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e4:	d3fb      	bcc.n	80007de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007e6:	f7ff ffd7 	bl	8000798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ea:	f001 fe9f 	bl	800252c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ee:	f7ff fea7 	bl	8000540 <main>
  bx  lr    
 80007f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80007f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007fc:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000800:	080025a4 	.word	0x080025a4
  ldr r2, =_sbss
 8000804:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000808:	200000d8 	.word	0x200000d8

0800080c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800080c:	e7fe      	b.n	800080c <ADC_IRQHandler>
	...

08000810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000814:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <HAL_Init+0x40>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a0d      	ldr	r2, [pc, #52]	; (8000850 <HAL_Init+0x40>)
 800081a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800081e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000820:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <HAL_Init+0x40>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <HAL_Init+0x40>)
 8000826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800082a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <HAL_Init+0x40>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a07      	ldr	r2, [pc, #28]	; (8000850 <HAL_Init+0x40>)
 8000832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000836:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000838:	2003      	movs	r0, #3
 800083a:	f000 f92b 	bl	8000a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800083e:	2000      	movs	r0, #0
 8000840:	f000 f808 	bl	8000854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000844:	f7ff ff1e 	bl	8000684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023c00 	.word	0x40023c00

08000854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <HAL_InitTick+0x54>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <HAL_InitTick+0x58>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	4619      	mov	r1, r3
 8000866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086a:	fbb3 f3f1 	udiv	r3, r3, r1
 800086e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f943 	bl	8000afe <HAL_SYSTICK_Config>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800087e:	2301      	movs	r3, #1
 8000880:	e00e      	b.n	80008a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b0f      	cmp	r3, #15
 8000886:	d80a      	bhi.n	800089e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000888:	2200      	movs	r2, #0
 800088a:	6879      	ldr	r1, [r7, #4]
 800088c:	f04f 30ff 	mov.w	r0, #4294967295
 8000890:	f000 f90b 	bl	8000aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000894:	4a06      	ldr	r2, [pc, #24]	; (80008b0 <HAL_InitTick+0x5c>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800089a:	2300      	movs	r3, #0
 800089c:	e000      	b.n	80008a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000020 	.word	0x20000020
 80008ac:	20000028 	.word	0x20000028
 80008b0:	20000024 	.word	0x20000024

080008b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <HAL_IncTick+0x20>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	461a      	mov	r2, r3
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_IncTick+0x24>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4413      	add	r3, r2
 80008c4:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <HAL_IncTick+0x24>)
 80008c6:	6013      	str	r3, [r2, #0]
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	20000028 	.word	0x20000028
 80008d8:	200000d4 	.word	0x200000d4

080008dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  return uwTick;
 80008e0:	4b03      	ldr	r3, [pc, #12]	; (80008f0 <HAL_GetTick+0x14>)
 80008e2:	681b      	ldr	r3, [r3, #0]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	200000d4 	.word	0x200000d4

080008f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <__NVIC_SetPriorityGrouping+0x44>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000910:	4013      	ands	r3, r2
 8000912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800091c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000926:	4a04      	ldr	r2, [pc, #16]	; (8000938 <__NVIC_SetPriorityGrouping+0x44>)
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	60d3      	str	r3, [r2, #12]
}
 800092c:	bf00      	nop
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <__NVIC_GetPriorityGrouping+0x18>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	0a1b      	lsrs	r3, r3, #8
 8000946:	f003 0307 	and.w	r3, r3, #7
}
 800094a:	4618      	mov	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	2b00      	cmp	r3, #0
 8000968:	db0b      	blt.n	8000982 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	f003 021f 	and.w	r2, r3, #31
 8000970:	4907      	ldr	r1, [pc, #28]	; (8000990 <__NVIC_EnableIRQ+0x38>)
 8000972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000976:	095b      	lsrs	r3, r3, #5
 8000978:	2001      	movs	r0, #1
 800097a:	fa00 f202 	lsl.w	r2, r0, r2
 800097e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000e100 	.word	0xe000e100

08000994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	db0a      	blt.n	80009be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	490c      	ldr	r1, [pc, #48]	; (80009e0 <__NVIC_SetPriority+0x4c>)
 80009ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b2:	0112      	lsls	r2, r2, #4
 80009b4:	b2d2      	uxtb	r2, r2
 80009b6:	440b      	add	r3, r1
 80009b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009bc:	e00a      	b.n	80009d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4908      	ldr	r1, [pc, #32]	; (80009e4 <__NVIC_SetPriority+0x50>)
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	f003 030f 	and.w	r3, r3, #15
 80009ca:	3b04      	subs	r3, #4
 80009cc:	0112      	lsls	r2, r2, #4
 80009ce:	b2d2      	uxtb	r2, r2
 80009d0:	440b      	add	r3, r1
 80009d2:	761a      	strb	r2, [r3, #24]
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	e000e100 	.word	0xe000e100
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b089      	sub	sp, #36	; 0x24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	f1c3 0307 	rsb	r3, r3, #7
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	bf28      	it	cs
 8000a06:	2304      	movcs	r3, #4
 8000a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	2b06      	cmp	r3, #6
 8000a10:	d902      	bls.n	8000a18 <NVIC_EncodePriority+0x30>
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	3b03      	subs	r3, #3
 8000a16:	e000      	b.n	8000a1a <NVIC_EncodePriority+0x32>
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43da      	mvns	r2, r3
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a30:	f04f 31ff 	mov.w	r1, #4294967295
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3a:	43d9      	mvns	r1, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a40:	4313      	orrs	r3, r2
         );
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3724      	adds	r7, #36	; 0x24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
	...

08000a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a60:	d301      	bcc.n	8000a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a62:	2301      	movs	r3, #1
 8000a64:	e00f      	b.n	8000a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a66:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <SysTick_Config+0x40>)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a6e:	210f      	movs	r1, #15
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	f7ff ff8e 	bl	8000994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <SysTick_Config+0x40>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7e:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <SysTick_Config+0x40>)
 8000a80:	2207      	movs	r2, #7
 8000a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	e000e010 	.word	0xe000e010

08000a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff ff29 	bl	80008f4 <__NVIC_SetPriorityGrouping>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b086      	sub	sp, #24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	60b9      	str	r1, [r7, #8]
 8000ab4:	607a      	str	r2, [r7, #4]
 8000ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000abc:	f7ff ff3e 	bl	800093c <__NVIC_GetPriorityGrouping>
 8000ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	68b9      	ldr	r1, [r7, #8]
 8000ac6:	6978      	ldr	r0, [r7, #20]
 8000ac8:	f7ff ff8e 	bl	80009e8 <NVIC_EncodePriority>
 8000acc:	4602      	mov	r2, r0
 8000ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ff5d 	bl	8000994 <__NVIC_SetPriority>
}
 8000ada:	bf00      	nop
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	4603      	mov	r3, r0
 8000aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff31 	bl	8000958 <__NVIC_EnableIRQ>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f7ff ffa2 	bl	8000a50 <SysTick_Config>
 8000b0c:	4603      	mov	r3, r0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000b1a:	f000 f802 	bl	8000b22 <HAL_SYSTICK_Callback>
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000b3e:	f7ff fecd 	bl	80008dc <HAL_GetTick>
 8000b42:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d008      	beq.n	8000b62 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2280      	movs	r2, #128	; 0x80
 8000b54:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e052      	b.n	8000c08 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f022 0216 	bic.w	r2, r2, #22
 8000b70:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	695a      	ldr	r2, [r3, #20]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b80:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d103      	bne.n	8000b92 <HAL_DMA_Abort+0x62>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d007      	beq.n	8000ba2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f022 0208 	bic.w	r2, r2, #8
 8000ba0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f022 0201 	bic.w	r2, r2, #1
 8000bb0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000bb2:	e013      	b.n	8000bdc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000bb4:	f7ff fe92 	bl	80008dc <HAL_GetTick>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	2b05      	cmp	r3, #5
 8000bc0:	d90c      	bls.n	8000bdc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2220      	movs	r2, #32
 8000bc6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2203      	movs	r2, #3
 8000bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	e015      	b.n	8000c08 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d1e4      	bne.n	8000bb4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bee:	223f      	movs	r2, #63	; 0x3f
 8000bf0:	409a      	lsls	r2, r3
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d004      	beq.n	8000c2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2280      	movs	r2, #128	; 0x80
 8000c28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e00c      	b.n	8000c48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2205      	movs	r2, #5
 8000c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f022 0201 	bic.w	r2, r2, #1
 8000c44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
 8000c6e:	e159      	b.n	8000f24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c70:	2201      	movs	r2, #1
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	697a      	ldr	r2, [r7, #20]
 8000c80:	4013      	ands	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	f040 8148 	bne.w	8000f1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f003 0303 	and.w	r3, r3, #3
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d005      	beq.n	8000ca6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d130      	bne.n	8000d08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	68da      	ldr	r2, [r3, #12]
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cdc:	2201      	movs	r2, #1
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	091b      	lsrs	r3, r3, #4
 8000cf2:	f003 0201 	and.w	r2, r3, #1
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0303 	and.w	r3, r3, #3
 8000d10:	2b03      	cmp	r3, #3
 8000d12:	d017      	beq.n	8000d44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	2203      	movs	r2, #3
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	689a      	ldr	r2, [r3, #8]
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 0303 	and.w	r3, r3, #3
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d123      	bne.n	8000d98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	08da      	lsrs	r2, r3, #3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3208      	adds	r2, #8
 8000d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	f003 0307 	and.w	r3, r3, #7
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	220f      	movs	r2, #15
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	691a      	ldr	r2, [r3, #16]
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	08da      	lsrs	r2, r3, #3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3208      	adds	r2, #8
 8000d92:	69b9      	ldr	r1, [r7, #24]
 8000d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	2203      	movs	r2, #3
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0203 	and.w	r2, r3, #3
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f000 80a2 	beq.w	8000f1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b57      	ldr	r3, [pc, #348]	; (8000f3c <HAL_GPIO_Init+0x2e8>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	4a56      	ldr	r2, [pc, #344]	; (8000f3c <HAL_GPIO_Init+0x2e8>)
 8000de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dea:	4b54      	ldr	r3, [pc, #336]	; (8000f3c <HAL_GPIO_Init+0x2e8>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000df6:	4a52      	ldr	r2, [pc, #328]	; (8000f40 <HAL_GPIO_Init+0x2ec>)
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	089b      	lsrs	r3, r3, #2
 8000dfc:	3302      	adds	r3, #2
 8000dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f003 0303 	and.w	r3, r3, #3
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	220f      	movs	r2, #15
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4013      	ands	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a49      	ldr	r2, [pc, #292]	; (8000f44 <HAL_GPIO_Init+0x2f0>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d019      	beq.n	8000e56 <HAL_GPIO_Init+0x202>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a48      	ldr	r2, [pc, #288]	; (8000f48 <HAL_GPIO_Init+0x2f4>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d013      	beq.n	8000e52 <HAL_GPIO_Init+0x1fe>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a47      	ldr	r2, [pc, #284]	; (8000f4c <HAL_GPIO_Init+0x2f8>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d00d      	beq.n	8000e4e <HAL_GPIO_Init+0x1fa>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a46      	ldr	r2, [pc, #280]	; (8000f50 <HAL_GPIO_Init+0x2fc>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d007      	beq.n	8000e4a <HAL_GPIO_Init+0x1f6>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a45      	ldr	r2, [pc, #276]	; (8000f54 <HAL_GPIO_Init+0x300>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d101      	bne.n	8000e46 <HAL_GPIO_Init+0x1f2>
 8000e42:	2304      	movs	r3, #4
 8000e44:	e008      	b.n	8000e58 <HAL_GPIO_Init+0x204>
 8000e46:	2307      	movs	r3, #7
 8000e48:	e006      	b.n	8000e58 <HAL_GPIO_Init+0x204>
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e004      	b.n	8000e58 <HAL_GPIO_Init+0x204>
 8000e4e:	2302      	movs	r3, #2
 8000e50:	e002      	b.n	8000e58 <HAL_GPIO_Init+0x204>
 8000e52:	2301      	movs	r3, #1
 8000e54:	e000      	b.n	8000e58 <HAL_GPIO_Init+0x204>
 8000e56:	2300      	movs	r3, #0
 8000e58:	69fa      	ldr	r2, [r7, #28]
 8000e5a:	f002 0203 	and.w	r2, r2, #3
 8000e5e:	0092      	lsls	r2, r2, #2
 8000e60:	4093      	lsls	r3, r2
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e68:	4935      	ldr	r1, [pc, #212]	; (8000f40 <HAL_GPIO_Init+0x2ec>)
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	089b      	lsrs	r3, r3, #2
 8000e6e:	3302      	adds	r3, #2
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e76:	4b38      	ldr	r3, [pc, #224]	; (8000f58 <HAL_GPIO_Init+0x304>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e9a:	4a2f      	ldr	r2, [pc, #188]	; (8000f58 <HAL_GPIO_Init+0x304>)
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ea0:	4b2d      	ldr	r3, [pc, #180]	; (8000f58 <HAL_GPIO_Init+0x304>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d003      	beq.n	8000ec4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ec4:	4a24      	ldr	r2, [pc, #144]	; (8000f58 <HAL_GPIO_Init+0x304>)
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eca:	4b23      	ldr	r3, [pc, #140]	; (8000f58 <HAL_GPIO_Init+0x304>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000eee:	4a1a      	ldr	r2, [pc, #104]	; (8000f58 <HAL_GPIO_Init+0x304>)
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <HAL_GPIO_Init+0x304>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f18:	4a0f      	ldr	r2, [pc, #60]	; (8000f58 <HAL_GPIO_Init+0x304>)
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3301      	adds	r3, #1
 8000f22:	61fb      	str	r3, [r7, #28]
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	2b0f      	cmp	r3, #15
 8000f28:	f67f aea2 	bls.w	8000c70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
 8000f30:	3724      	adds	r7, #36	; 0x24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40013800 	.word	0x40013800
 8000f44:	40020000 	.word	0x40020000
 8000f48:	40020400 	.word	0x40020400
 8000f4c:	40020800 	.word	0x40020800
 8000f50:	40020c00 	.word	0x40020c00
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40013c00 	.word	0x40013c00

08000f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f6c:	787b      	ldrb	r3, [r7, #1]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f72:	887a      	ldrh	r2, [r7, #2]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f78:	e003      	b.n	8000f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f7a:	887b      	ldrh	r3, [r7, #2]
 8000f7c:	041a      	lsls	r2, r3, #16
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	619a      	str	r2, [r3, #24]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <HAL_PWR_EnableSleepOnExit+0x1c>)
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <HAL_PWR_EnableSleepOnExit+0x1c>)
 8000f9a:	f043 0302 	orr.w	r3, r3, #2
 8000f9e:	6113      	str	r3, [r2, #16]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000020 	.word	0x20000020

08000fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000fcc:	f7ff fff0 	bl	8000fb0 <HAL_RCC_GetHCLKFreq>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	0a9b      	lsrs	r3, r3, #10
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	4903      	ldr	r1, [pc, #12]	; (8000fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8000fde:	5ccb      	ldrb	r3, [r1, r3]
 8000fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	0800258c 	.word	0x0800258c

08000ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000ff4:	f7ff ffdc 	bl	8000fb0 <HAL_RCC_GetHCLKFreq>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	4b05      	ldr	r3, [pc, #20]	; (8001010 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	0b5b      	lsrs	r3, r3, #13
 8001000:	f003 0307 	and.w	r3, r3, #7
 8001004:	4903      	ldr	r1, [pc, #12]	; (8001014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001006:	5ccb      	ldrb	r3, [r1, r3]
 8001008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800100c:	4618      	mov	r0, r3
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40023800 	.word	0x40023800
 8001014:	0800258c 	.word	0x0800258c

08001018 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e041      	b.n	80010ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d106      	bne.n	8001044 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff fb42 	bl	80006c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2202      	movs	r2, #2
 8001048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3304      	adds	r3, #4
 8001054:	4619      	mov	r1, r3
 8001056:	4610      	mov	r0, r2
 8001058:	f000 f9c0 	bl	80013dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2201      	movs	r2, #1
 8001068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2201      	movs	r2, #1
 8001070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2201      	movs	r2, #1
 8001078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2201      	movs	r2, #1
 8001080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2201      	movs	r2, #1
 8001088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2201      	movs	r2, #1
 8001098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2201      	movs	r2, #1
 80010a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2201      	movs	r2, #1
 80010a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d001      	beq.n	80010d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e044      	b.n	800115a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2202      	movs	r2, #2
 80010d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68da      	ldr	r2, [r3, #12]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f042 0201 	orr.w	r2, r2, #1
 80010e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a1e      	ldr	r2, [pc, #120]	; (8001168 <HAL_TIM_Base_Start_IT+0xb0>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d018      	beq.n	8001124 <HAL_TIM_Base_Start_IT+0x6c>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010fa:	d013      	beq.n	8001124 <HAL_TIM_Base_Start_IT+0x6c>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a1a      	ldr	r2, [pc, #104]	; (800116c <HAL_TIM_Base_Start_IT+0xb4>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d00e      	beq.n	8001124 <HAL_TIM_Base_Start_IT+0x6c>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a19      	ldr	r2, [pc, #100]	; (8001170 <HAL_TIM_Base_Start_IT+0xb8>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d009      	beq.n	8001124 <HAL_TIM_Base_Start_IT+0x6c>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a17      	ldr	r2, [pc, #92]	; (8001174 <HAL_TIM_Base_Start_IT+0xbc>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d004      	beq.n	8001124 <HAL_TIM_Base_Start_IT+0x6c>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a16      	ldr	r2, [pc, #88]	; (8001178 <HAL_TIM_Base_Start_IT+0xc0>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d111      	bne.n	8001148 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2b06      	cmp	r3, #6
 8001134:	d010      	beq.n	8001158 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f042 0201 	orr.w	r2, r2, #1
 8001144:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001146:	e007      	b.n	8001158 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 0201 	orr.w	r2, r2, #1
 8001156:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40010000 	.word	0x40010000
 800116c:	40000400 	.word	0x40000400
 8001170:	40000800 	.word	0x40000800
 8001174:	40000c00 	.word	0x40000c00
 8001178:	40014000 	.word	0x40014000

0800117c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b02      	cmp	r3, #2
 8001190:	d122      	bne.n	80011d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b02      	cmp	r3, #2
 800119e:	d11b      	bne.n	80011d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f06f 0202 	mvn.w	r2, #2
 80011a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 f8ee 	bl	80013a0 <HAL_TIM_IC_CaptureCallback>
 80011c4:	e005      	b.n	80011d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 f8e0 	bl	800138c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 f8f1 	bl	80013b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	d122      	bne.n	800122c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	2b04      	cmp	r3, #4
 80011f2:	d11b      	bne.n	800122c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f06f 0204 	mvn.w	r2, #4
 80011fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2202      	movs	r2, #2
 8001202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 f8c4 	bl	80013a0 <HAL_TIM_IC_CaptureCallback>
 8001218:	e005      	b.n	8001226 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f000 f8b6 	bl	800138c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 f8c7 	bl	80013b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	2b08      	cmp	r3, #8
 8001238:	d122      	bne.n	8001280 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	f003 0308 	and.w	r3, r3, #8
 8001244:	2b08      	cmp	r3, #8
 8001246:	d11b      	bne.n	8001280 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f06f 0208 	mvn.w	r2, #8
 8001250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2204      	movs	r2, #4
 8001256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 f89a 	bl	80013a0 <HAL_TIM_IC_CaptureCallback>
 800126c:	e005      	b.n	800127a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 f88c 	bl	800138c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f000 f89d 	bl	80013b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	f003 0310 	and.w	r3, r3, #16
 800128a:	2b10      	cmp	r3, #16
 800128c:	d122      	bne.n	80012d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	f003 0310 	and.w	r3, r3, #16
 8001298:	2b10      	cmp	r3, #16
 800129a:	d11b      	bne.n	80012d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f06f 0210 	mvn.w	r2, #16
 80012a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2208      	movs	r2, #8
 80012aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 f870 	bl	80013a0 <HAL_TIM_IC_CaptureCallback>
 80012c0:	e005      	b.n	80012ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 f862 	bl	800138c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 f873 	bl	80013b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d10e      	bne.n	8001300 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d107      	bne.n	8001300 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f06f 0201 	mvn.w	r2, #1
 80012f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff f9a2 	bl	8000644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130a:	2b80      	cmp	r3, #128	; 0x80
 800130c:	d10e      	bne.n	800132c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001318:	2b80      	cmp	r3, #128	; 0x80
 800131a:	d107      	bne.n	800132c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 f8e2 	bl	80014f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001336:	2b40      	cmp	r3, #64	; 0x40
 8001338:	d10e      	bne.n	8001358 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001344:	2b40      	cmp	r3, #64	; 0x40
 8001346:	d107      	bne.n	8001358 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 f838 	bl	80013c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	f003 0320 	and.w	r3, r3, #32
 8001362:	2b20      	cmp	r3, #32
 8001364:	d10e      	bne.n	8001384 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	f003 0320 	and.w	r3, r3, #32
 8001370:	2b20      	cmp	r3, #32
 8001372:	d107      	bne.n	8001384 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f06f 0220 	mvn.w	r2, #32
 800137c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 f8ac 	bl	80014dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a34      	ldr	r2, [pc, #208]	; (80014c0 <TIM_Base_SetConfig+0xe4>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d00f      	beq.n	8001414 <TIM_Base_SetConfig+0x38>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013fa:	d00b      	beq.n	8001414 <TIM_Base_SetConfig+0x38>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a31      	ldr	r2, [pc, #196]	; (80014c4 <TIM_Base_SetConfig+0xe8>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d007      	beq.n	8001414 <TIM_Base_SetConfig+0x38>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a30      	ldr	r2, [pc, #192]	; (80014c8 <TIM_Base_SetConfig+0xec>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d003      	beq.n	8001414 <TIM_Base_SetConfig+0x38>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a2f      	ldr	r2, [pc, #188]	; (80014cc <TIM_Base_SetConfig+0xf0>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d108      	bne.n	8001426 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800141a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	4313      	orrs	r3, r2
 8001424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a25      	ldr	r2, [pc, #148]	; (80014c0 <TIM_Base_SetConfig+0xe4>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d01b      	beq.n	8001466 <TIM_Base_SetConfig+0x8a>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001434:	d017      	beq.n	8001466 <TIM_Base_SetConfig+0x8a>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a22      	ldr	r2, [pc, #136]	; (80014c4 <TIM_Base_SetConfig+0xe8>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d013      	beq.n	8001466 <TIM_Base_SetConfig+0x8a>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a21      	ldr	r2, [pc, #132]	; (80014c8 <TIM_Base_SetConfig+0xec>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d00f      	beq.n	8001466 <TIM_Base_SetConfig+0x8a>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a20      	ldr	r2, [pc, #128]	; (80014cc <TIM_Base_SetConfig+0xf0>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d00b      	beq.n	8001466 <TIM_Base_SetConfig+0x8a>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a1f      	ldr	r2, [pc, #124]	; (80014d0 <TIM_Base_SetConfig+0xf4>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d007      	beq.n	8001466 <TIM_Base_SetConfig+0x8a>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a1e      	ldr	r2, [pc, #120]	; (80014d4 <TIM_Base_SetConfig+0xf8>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d003      	beq.n	8001466 <TIM_Base_SetConfig+0x8a>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a1d      	ldr	r2, [pc, #116]	; (80014d8 <TIM_Base_SetConfig+0xfc>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d108      	bne.n	8001478 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800146c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	4313      	orrs	r3, r2
 8001476:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	4313      	orrs	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a08      	ldr	r2, [pc, #32]	; (80014c0 <TIM_Base_SetConfig+0xe4>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d103      	bne.n	80014ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	691a      	ldr	r2, [r3, #16]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	615a      	str	r2, [r3, #20]
}
 80014b2:	bf00      	nop
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40010000 	.word	0x40010000
 80014c4:	40000400 	.word	0x40000400
 80014c8:	40000800 	.word	0x40000800
 80014cc:	40000c00 	.word	0x40000c00
 80014d0:	40014000 	.word	0x40014000
 80014d4:	40014400 	.word	0x40014400
 80014d8:	40014800 	.word	0x40014800

080014dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e03f      	b.n	8001596 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d106      	bne.n	8001530 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff f8ec 	bl	8000708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2224      	movs	r2, #36	; 0x24
 8001534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68da      	ldr	r2, [r3, #12]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001546:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 fd7b 	bl	8002044 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	691a      	ldr	r2, [r3, #16]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800155c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	695a      	ldr	r2, [r3, #20]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800156c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800157c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2220      	movs	r2, #32
 8001588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2220      	movs	r2, #32
 8001590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b08a      	sub	sp, #40	; 0x28
 80015a2:	af02      	add	r7, sp, #8
 80015a4:	60f8      	str	r0, [r7, #12]
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	4613      	mov	r3, r2
 80015ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b20      	cmp	r3, #32
 80015bc:	d17c      	bne.n	80016b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <HAL_UART_Transmit+0x2c>
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e075      	b.n	80016ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d101      	bne.n	80015dc <HAL_UART_Transmit+0x3e>
 80015d8:	2302      	movs	r3, #2
 80015da:	e06e      	b.n	80016ba <HAL_UART_Transmit+0x11c>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2200      	movs	r2, #0
 80015e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2221      	movs	r2, #33	; 0x21
 80015ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80015f2:	f7ff f973 	bl	80008dc <HAL_GetTick>
 80015f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	88fa      	ldrh	r2, [r7, #6]
 80015fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	88fa      	ldrh	r2, [r7, #6]
 8001602:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800160c:	d108      	bne.n	8001620 <HAL_UART_Transmit+0x82>
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d104      	bne.n	8001620 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	61bb      	str	r3, [r7, #24]
 800161e:	e003      	b.n	8001628 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001630:	e02a      	b.n	8001688 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	2200      	movs	r2, #0
 800163a:	2180      	movs	r1, #128	; 0x80
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f000 faf9 	bl	8001c34 <UART_WaitOnFlagUntilTimeout>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e036      	b.n	80016ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10b      	bne.n	800166a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001660:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	3302      	adds	r3, #2
 8001666:	61bb      	str	r3, [r7, #24]
 8001668:	e007      	b.n	800167a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	781a      	ldrb	r2, [r3, #0]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	3301      	adds	r3, #1
 8001678:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800167e:	b29b      	uxth	r3, r3
 8001680:	3b01      	subs	r3, #1
 8001682:	b29a      	uxth	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800168c:	b29b      	uxth	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1cf      	bne.n	8001632 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	2200      	movs	r2, #0
 800169a:	2140      	movs	r1, #64	; 0x40
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f000 fac9 	bl	8001c34 <UART_WaitOnFlagUntilTimeout>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e006      	b.n	80016ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2220      	movs	r2, #32
 80016b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80016b4:	2300      	movs	r3, #0
 80016b6:	e000      	b.n	80016ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80016b8:	2302      	movs	r3, #2
  }
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3720      	adds	r7, #32
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b0ba      	sub	sp, #232	; 0xe8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80016f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001702:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10f      	bne.n	800172a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800170a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800170e:	f003 0320 	and.w	r3, r3, #32
 8001712:	2b00      	cmp	r3, #0
 8001714:	d009      	beq.n	800172a <HAL_UART_IRQHandler+0x66>
 8001716:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800171a:	f003 0320 	and.w	r3, r3, #32
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 fbd3 	bl	8001ece <UART_Receive_IT>
      return;
 8001728:	e256      	b.n	8001bd8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800172a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 80de 	beq.w	80018f0 <HAL_UART_IRQHandler+0x22c>
 8001734:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	d106      	bne.n	800174e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001744:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 80d1 	beq.w	80018f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800174e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00b      	beq.n	8001772 <HAL_UART_IRQHandler+0xae>
 800175a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800175e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001762:	2b00      	cmp	r3, #0
 8001764:	d005      	beq.n	8001772 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f043 0201 	orr.w	r2, r3, #1
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00b      	beq.n	8001796 <HAL_UART_IRQHandler+0xd2>
 800177e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d005      	beq.n	8001796 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f043 0202 	orr.w	r2, r3, #2
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00b      	beq.n	80017ba <HAL_UART_IRQHandler+0xf6>
 80017a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d005      	beq.n	80017ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f043 0204 	orr.w	r2, r3, #4
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80017ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d011      	beq.n	80017ea <HAL_UART_IRQHandler+0x126>
 80017c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80017ca:	f003 0320 	and.w	r3, r3, #32
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d105      	bne.n	80017de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80017d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f043 0208 	orr.w	r2, r3, #8
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 81ed 	beq.w	8001bce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80017f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80017f8:	f003 0320 	and.w	r3, r3, #32
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d008      	beq.n	8001812 <HAL_UART_IRQHandler+0x14e>
 8001800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001804:	f003 0320 	and.w	r3, r3, #32
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 fb5e 	bl	8001ece <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800181c:	2b40      	cmp	r3, #64	; 0x40
 800181e:	bf0c      	ite	eq
 8001820:	2301      	moveq	r3, #1
 8001822:	2300      	movne	r3, #0
 8001824:	b2db      	uxtb	r3, r3
 8001826:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b00      	cmp	r3, #0
 8001834:	d103      	bne.n	800183e <HAL_UART_IRQHandler+0x17a>
 8001836:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800183a:	2b00      	cmp	r3, #0
 800183c:	d04f      	beq.n	80018de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 fa66 	bl	8001d10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800184e:	2b40      	cmp	r3, #64	; 0x40
 8001850:	d141      	bne.n	80018d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	3314      	adds	r3, #20
 8001858:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800185c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001860:	e853 3f00 	ldrex	r3, [r3]
 8001864:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001868:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800186c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001870:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	3314      	adds	r3, #20
 800187a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800187e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001882:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001886:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800188a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800188e:	e841 2300 	strex	r3, r2, [r1]
 8001892:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001896:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1d9      	bne.n	8001852 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d013      	beq.n	80018ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018aa:	4a7d      	ldr	r2, [pc, #500]	; (8001aa0 <HAL_UART_IRQHandler+0x3dc>)
 80018ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff f9ac 	bl	8000c10 <HAL_DMA_Abort_IT>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d016      	beq.n	80018ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018c8:	4610      	mov	r0, r2
 80018ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018cc:	e00e      	b.n	80018ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f99a 	bl	8001c08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018d4:	e00a      	b.n	80018ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f996 	bl	8001c08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018dc:	e006      	b.n	80018ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 f992 	bl	8001c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80018ea:	e170      	b.n	8001bce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018ec:	bf00      	nop
    return;
 80018ee:	e16e      	b.n	8001bce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	f040 814a 	bne.w	8001b8e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80018fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 8143 	beq.w	8001b8e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800190c:	f003 0310 	and.w	r3, r3, #16
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 813c 	beq.w	8001b8e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001936:	2b40      	cmp	r3, #64	; 0x40
 8001938:	f040 80b4 	bne.w	8001aa4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001948:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 8140 	beq.w	8001bd2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001956:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800195a:	429a      	cmp	r2, r3
 800195c:	f080 8139 	bcs.w	8001bd2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001966:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001972:	f000 8088 	beq.w	8001a86 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	330c      	adds	r3, #12
 800197c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001980:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001984:	e853 3f00 	ldrex	r3, [r3]
 8001988:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800198c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001994:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	330c      	adds	r3, #12
 800199e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80019a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80019a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80019ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80019b2:	e841 2300 	strex	r3, r2, [r1]
 80019b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80019ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1d9      	bne.n	8001976 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	3314      	adds	r3, #20
 80019c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019cc:	e853 3f00 	ldrex	r3, [r3]
 80019d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80019d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019d4:	f023 0301 	bic.w	r3, r3, #1
 80019d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	3314      	adds	r3, #20
 80019e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80019e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80019ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80019ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80019f2:	e841 2300 	strex	r3, r2, [r1]
 80019f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80019f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1e1      	bne.n	80019c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	3314      	adds	r3, #20
 8001a04:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a08:	e853 3f00 	ldrex	r3, [r3]
 8001a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001a0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	3314      	adds	r3, #20
 8001a1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001a22:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001a24:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a26:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001a28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001a2a:	e841 2300 	strex	r3, r2, [r1]
 8001a2e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001a30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1e3      	bne.n	80019fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2220      	movs	r2, #32
 8001a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	330c      	adds	r3, #12
 8001a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a4e:	e853 3f00 	ldrex	r3, [r3]
 8001a52:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a56:	f023 0310 	bic.w	r3, r3, #16
 8001a5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	330c      	adds	r3, #12
 8001a64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001a68:	65ba      	str	r2, [r7, #88]	; 0x58
 8001a6a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001a6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a70:	e841 2300 	strex	r3, r2, [r1]
 8001a74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1e3      	bne.n	8001a44 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff f855 	bl	8000b30 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	4619      	mov	r1, r3
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f8c0 	bl	8001c1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001a9c:	e099      	b.n	8001bd2 <HAL_UART_IRQHandler+0x50e>
 8001a9e:	bf00      	nop
 8001aa0:	08001dd7 	.word	0x08001dd7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 808b 	beq.w	8001bd6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8001ac0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 8086 	beq.w	8001bd6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	330c      	adds	r3, #12
 8001ad0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ad4:	e853 3f00 	ldrex	r3, [r3]
 8001ad8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001adc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001ae0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	330c      	adds	r3, #12
 8001aea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001aee:	647a      	str	r2, [r7, #68]	; 0x44
 8001af0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001af2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001af4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001af6:	e841 2300 	strex	r3, r2, [r1]
 8001afa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1e3      	bne.n	8001aca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	3314      	adds	r3, #20
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	e853 3f00 	ldrex	r3, [r3]
 8001b10:	623b      	str	r3, [r7, #32]
   return(result);
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	f023 0301 	bic.w	r3, r3, #1
 8001b18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	3314      	adds	r3, #20
 8001b22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001b26:	633a      	str	r2, [r7, #48]	; 0x30
 8001b28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b2e:	e841 2300 	strex	r3, r2, [r1]
 8001b32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1e3      	bne.n	8001b02 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	330c      	adds	r3, #12
 8001b4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	e853 3f00 	ldrex	r3, [r3]
 8001b56:	60fb      	str	r3, [r7, #12]
   return(result);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f023 0310 	bic.w	r3, r3, #16
 8001b5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	330c      	adds	r3, #12
 8001b68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001b6c:	61fa      	str	r2, [r7, #28]
 8001b6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b70:	69b9      	ldr	r1, [r7, #24]
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	e841 2300 	strex	r3, r2, [r1]
 8001b78:	617b      	str	r3, [r7, #20]
   return(result);
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1e3      	bne.n	8001b48 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001b80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001b84:	4619      	mov	r1, r3
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f848 	bl	8001c1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001b8c:	e023      	b.n	8001bd6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d009      	beq.n	8001bae <HAL_UART_IRQHandler+0x4ea>
 8001b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f929 	bl	8001dfe <UART_Transmit_IT>
    return;
 8001bac:	e014      	b.n	8001bd8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00e      	beq.n	8001bd8 <HAL_UART_IRQHandler+0x514>
 8001bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d008      	beq.n	8001bd8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f969 	bl	8001e9e <UART_EndTransmit_IT>
    return;
 8001bcc:	e004      	b.n	8001bd8 <HAL_UART_IRQHandler+0x514>
    return;
 8001bce:	bf00      	nop
 8001bd0:	e002      	b.n	8001bd8 <HAL_UART_IRQHandler+0x514>
      return;
 8001bd2:	bf00      	nop
 8001bd4:	e000      	b.n	8001bd8 <HAL_UART_IRQHandler+0x514>
      return;
 8001bd6:	bf00      	nop
  }
}
 8001bd8:	37e8      	adds	r7, #232	; 0xe8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop

08001be0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b090      	sub	sp, #64	; 0x40
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	603b      	str	r3, [r7, #0]
 8001c40:	4613      	mov	r3, r2
 8001c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c44:	e050      	b.n	8001ce8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4c:	d04c      	beq.n	8001ce8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d007      	beq.n	8001c64 <UART_WaitOnFlagUntilTimeout+0x30>
 8001c54:	f7fe fe42 	bl	80008dc <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d241      	bcs.n	8001ce8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	330c      	adds	r3, #12
 8001c6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c6e:	e853 3f00 	ldrex	r3, [r3]
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	330c      	adds	r3, #12
 8001c82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c84:	637a      	str	r2, [r7, #52]	; 0x34
 8001c86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c8c:	e841 2300 	strex	r3, r2, [r1]
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1e5      	bne.n	8001c64 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	3314      	adds	r3, #20
 8001c9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	e853 3f00 	ldrex	r3, [r3]
 8001ca6:	613b      	str	r3, [r7, #16]
   return(result);
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	f023 0301 	bic.w	r3, r3, #1
 8001cae:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	3314      	adds	r3, #20
 8001cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cb8:	623a      	str	r2, [r7, #32]
 8001cba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cbc:	69f9      	ldr	r1, [r7, #28]
 8001cbe:	6a3a      	ldr	r2, [r7, #32]
 8001cc0:	e841 2300 	strex	r3, r2, [r1]
 8001cc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1e5      	bne.n	8001c98 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e00f      	b.n	8001d08 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	bf0c      	ite	eq
 8001cf8:	2301      	moveq	r3, #1
 8001cfa:	2300      	movne	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	461a      	mov	r2, r3
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d09f      	beq.n	8001c46 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3740      	adds	r7, #64	; 0x40
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b095      	sub	sp, #84	; 0x54
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	330c      	adds	r3, #12
 8001d1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d22:	e853 3f00 	ldrex	r3, [r3]
 8001d26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	330c      	adds	r3, #12
 8001d36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d38:	643a      	str	r2, [r7, #64]	; 0x40
 8001d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001d3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d40:	e841 2300 	strex	r3, r2, [r1]
 8001d44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1e5      	bne.n	8001d18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	3314      	adds	r3, #20
 8001d52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	e853 3f00 	ldrex	r3, [r3]
 8001d5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f023 0301 	bic.w	r3, r3, #1
 8001d62:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	3314      	adds	r3, #20
 8001d6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d74:	e841 2300 	strex	r3, r2, [r1]
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1e5      	bne.n	8001d4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d119      	bne.n	8001dbc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	330c      	adds	r3, #12
 8001d8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	e853 3f00 	ldrex	r3, [r3]
 8001d96:	60bb      	str	r3, [r7, #8]
   return(result);
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	f023 0310 	bic.w	r3, r3, #16
 8001d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	330c      	adds	r3, #12
 8001da6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001da8:	61ba      	str	r2, [r7, #24]
 8001daa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dac:	6979      	ldr	r1, [r7, #20]
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	e841 2300 	strex	r3, r2, [r1]
 8001db4:	613b      	str	r3, [r7, #16]
   return(result);
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1e5      	bne.n	8001d88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001dca:	bf00      	nop
 8001dcc:	3754      	adds	r7, #84	; 0x54
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b084      	sub	sp, #16
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f7ff ff09 	bl	8001c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001df6:	bf00      	nop
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b085      	sub	sp, #20
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b21      	cmp	r3, #33	; 0x21
 8001e10:	d13e      	bne.n	8001e90 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e1a:	d114      	bne.n	8001e46 <UART_Transmit_IT+0x48>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d110      	bne.n	8001e46 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e38:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	1c9a      	adds	r2, r3, #2
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	621a      	str	r2, [r3, #32]
 8001e44:	e008      	b.n	8001e58 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	1c59      	adds	r1, r3, #1
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6211      	str	r1, [r2, #32]
 8001e50:	781a      	ldrb	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	4619      	mov	r1, r3
 8001e66:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10f      	bne.n	8001e8c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e7a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e8a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	e000      	b.n	8001e92 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001e90:	2302      	movs	r3, #2
  }
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2220      	movs	r2, #32
 8001eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff fe8e 	bl	8001be0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b08c      	sub	sp, #48	; 0x30
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b22      	cmp	r3, #34	; 0x22
 8001ee0:	f040 80ab 	bne.w	800203a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eec:	d117      	bne.n	8001f1e <UART_Receive_IT+0x50>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d113      	bne.n	8001f1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	1c9a      	adds	r2, r3, #2
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	629a      	str	r2, [r3, #40]	; 0x28
 8001f1c:	e026      	b.n	8001f6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f30:	d007      	beq.n	8001f42 <UART_Receive_IT+0x74>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10a      	bne.n	8001f50 <UART_Receive_IT+0x82>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d106      	bne.n	8001f50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4c:	701a      	strb	r2, [r3, #0]
 8001f4e:	e008      	b.n	8001f62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	3b01      	subs	r3, #1
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d15a      	bne.n	8002036 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0220 	bic.w	r2, r2, #32
 8001f8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	695a      	ldr	r2, [r3, #20]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0201 	bic.w	r2, r2, #1
 8001fae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d135      	bne.n	800202c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	330c      	adds	r3, #12
 8001fcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	e853 3f00 	ldrex	r3, [r3]
 8001fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	f023 0310 	bic.w	r3, r3, #16
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	330c      	adds	r3, #12
 8001fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe6:	623a      	str	r2, [r7, #32]
 8001fe8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fea:	69f9      	ldr	r1, [r7, #28]
 8001fec:	6a3a      	ldr	r2, [r7, #32]
 8001fee:	e841 2300 	strex	r3, r2, [r1]
 8001ff2:	61bb      	str	r3, [r7, #24]
   return(result);
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1e5      	bne.n	8001fc6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	2b10      	cmp	r3, #16
 8002006:	d10a      	bne.n	800201e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002022:	4619      	mov	r1, r3
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff fdf9 	bl	8001c1c <HAL_UARTEx_RxEventCallback>
 800202a:	e002      	b.n	8002032 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff fde1 	bl	8001bf4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	e002      	b.n	800203c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	e000      	b.n	800203c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800203a:	2302      	movs	r3, #2
  }
}
 800203c:	4618      	mov	r0, r3
 800203e:	3730      	adds	r7, #48	; 0x30
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002048:	b0c0      	sub	sp, #256	; 0x100
 800204a:	af00      	add	r7, sp, #0
 800204c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800205c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002060:	68d9      	ldr	r1, [r3, #12]
 8002062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	ea40 0301 	orr.w	r3, r0, r1
 800206c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800206e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	431a      	orrs	r2, r3
 800207c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	431a      	orrs	r2, r3
 8002084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	4313      	orrs	r3, r2
 800208c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800209c:	f021 010c 	bic.w	r1, r1, #12
 80020a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80020aa:	430b      	orrs	r3, r1
 80020ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80020ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020be:	6999      	ldr	r1, [r3, #24]
 80020c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	ea40 0301 	orr.w	r3, r0, r1
 80020ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	4b8f      	ldr	r3, [pc, #572]	; (8002310 <UART_SetConfig+0x2cc>)
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d005      	beq.n	80020e4 <UART_SetConfig+0xa0>
 80020d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4b8d      	ldr	r3, [pc, #564]	; (8002314 <UART_SetConfig+0x2d0>)
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d104      	bne.n	80020ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80020e4:	f7fe ff84 	bl	8000ff0 <HAL_RCC_GetPCLK2Freq>
 80020e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80020ec:	e003      	b.n	80020f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80020ee:	f7fe ff6b 	bl	8000fc8 <HAL_RCC_GetPCLK1Freq>
 80020f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002100:	f040 810c 	bne.w	800231c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002108:	2200      	movs	r2, #0
 800210a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800210e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002112:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002116:	4622      	mov	r2, r4
 8002118:	462b      	mov	r3, r5
 800211a:	1891      	adds	r1, r2, r2
 800211c:	65b9      	str	r1, [r7, #88]	; 0x58
 800211e:	415b      	adcs	r3, r3
 8002120:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002122:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002126:	4621      	mov	r1, r4
 8002128:	eb12 0801 	adds.w	r8, r2, r1
 800212c:	4629      	mov	r1, r5
 800212e:	eb43 0901 	adc.w	r9, r3, r1
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800213e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002142:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002146:	4690      	mov	r8, r2
 8002148:	4699      	mov	r9, r3
 800214a:	4623      	mov	r3, r4
 800214c:	eb18 0303 	adds.w	r3, r8, r3
 8002150:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002154:	462b      	mov	r3, r5
 8002156:	eb49 0303 	adc.w	r3, r9, r3
 800215a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800215e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800216a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800216e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002172:	460b      	mov	r3, r1
 8002174:	18db      	adds	r3, r3, r3
 8002176:	653b      	str	r3, [r7, #80]	; 0x50
 8002178:	4613      	mov	r3, r2
 800217a:	eb42 0303 	adc.w	r3, r2, r3
 800217e:	657b      	str	r3, [r7, #84]	; 0x54
 8002180:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002184:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002188:	f7fe f82e 	bl	80001e8 <__aeabi_uldivmod>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4b61      	ldr	r3, [pc, #388]	; (8002318 <UART_SetConfig+0x2d4>)
 8002192:	fba3 2302 	umull	r2, r3, r3, r2
 8002196:	095b      	lsrs	r3, r3, #5
 8002198:	011c      	lsls	r4, r3, #4
 800219a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800219e:	2200      	movs	r2, #0
 80021a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80021a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80021a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80021ac:	4642      	mov	r2, r8
 80021ae:	464b      	mov	r3, r9
 80021b0:	1891      	adds	r1, r2, r2
 80021b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80021b4:	415b      	adcs	r3, r3
 80021b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80021bc:	4641      	mov	r1, r8
 80021be:	eb12 0a01 	adds.w	sl, r2, r1
 80021c2:	4649      	mov	r1, r9
 80021c4:	eb43 0b01 	adc.w	fp, r3, r1
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021dc:	4692      	mov	sl, r2
 80021de:	469b      	mov	fp, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	eb1a 0303 	adds.w	r3, sl, r3
 80021e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021ea:	464b      	mov	r3, r9
 80021ec:	eb4b 0303 	adc.w	r3, fp, r3
 80021f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80021f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002200:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002204:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002208:	460b      	mov	r3, r1
 800220a:	18db      	adds	r3, r3, r3
 800220c:	643b      	str	r3, [r7, #64]	; 0x40
 800220e:	4613      	mov	r3, r2
 8002210:	eb42 0303 	adc.w	r3, r2, r3
 8002214:	647b      	str	r3, [r7, #68]	; 0x44
 8002216:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800221a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800221e:	f7fd ffe3 	bl	80001e8 <__aeabi_uldivmod>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	4611      	mov	r1, r2
 8002228:	4b3b      	ldr	r3, [pc, #236]	; (8002318 <UART_SetConfig+0x2d4>)
 800222a:	fba3 2301 	umull	r2, r3, r3, r1
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	2264      	movs	r2, #100	; 0x64
 8002232:	fb02 f303 	mul.w	r3, r2, r3
 8002236:	1acb      	subs	r3, r1, r3
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800223e:	4b36      	ldr	r3, [pc, #216]	; (8002318 <UART_SetConfig+0x2d4>)
 8002240:	fba3 2302 	umull	r2, r3, r3, r2
 8002244:	095b      	lsrs	r3, r3, #5
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800224c:	441c      	add	r4, r3
 800224e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002252:	2200      	movs	r2, #0
 8002254:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002258:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800225c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002260:	4642      	mov	r2, r8
 8002262:	464b      	mov	r3, r9
 8002264:	1891      	adds	r1, r2, r2
 8002266:	63b9      	str	r1, [r7, #56]	; 0x38
 8002268:	415b      	adcs	r3, r3
 800226a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800226c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002270:	4641      	mov	r1, r8
 8002272:	1851      	adds	r1, r2, r1
 8002274:	6339      	str	r1, [r7, #48]	; 0x30
 8002276:	4649      	mov	r1, r9
 8002278:	414b      	adcs	r3, r1
 800227a:	637b      	str	r3, [r7, #52]	; 0x34
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	f04f 0300 	mov.w	r3, #0
 8002284:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002288:	4659      	mov	r1, fp
 800228a:	00cb      	lsls	r3, r1, #3
 800228c:	4651      	mov	r1, sl
 800228e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002292:	4651      	mov	r1, sl
 8002294:	00ca      	lsls	r2, r1, #3
 8002296:	4610      	mov	r0, r2
 8002298:	4619      	mov	r1, r3
 800229a:	4603      	mov	r3, r0
 800229c:	4642      	mov	r2, r8
 800229e:	189b      	adds	r3, r3, r2
 80022a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80022a4:	464b      	mov	r3, r9
 80022a6:	460a      	mov	r2, r1
 80022a8:	eb42 0303 	adc.w	r3, r2, r3
 80022ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80022bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80022c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80022c4:	460b      	mov	r3, r1
 80022c6:	18db      	adds	r3, r3, r3
 80022c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ca:	4613      	mov	r3, r2
 80022cc:	eb42 0303 	adc.w	r3, r2, r3
 80022d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80022da:	f7fd ff85 	bl	80001e8 <__aeabi_uldivmod>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <UART_SetConfig+0x2d4>)
 80022e4:	fba3 1302 	umull	r1, r3, r3, r2
 80022e8:	095b      	lsrs	r3, r3, #5
 80022ea:	2164      	movs	r1, #100	; 0x64
 80022ec:	fb01 f303 	mul.w	r3, r1, r3
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	3332      	adds	r3, #50	; 0x32
 80022f6:	4a08      	ldr	r2, [pc, #32]	; (8002318 <UART_SetConfig+0x2d4>)
 80022f8:	fba2 2303 	umull	r2, r3, r2, r3
 80022fc:	095b      	lsrs	r3, r3, #5
 80022fe:	f003 0207 	and.w	r2, r3, #7
 8002302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4422      	add	r2, r4
 800230a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800230c:	e105      	b.n	800251a <UART_SetConfig+0x4d6>
 800230e:	bf00      	nop
 8002310:	40011000 	.word	0x40011000
 8002314:	40011400 	.word	0x40011400
 8002318:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800231c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002320:	2200      	movs	r2, #0
 8002322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002326:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800232a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800232e:	4642      	mov	r2, r8
 8002330:	464b      	mov	r3, r9
 8002332:	1891      	adds	r1, r2, r2
 8002334:	6239      	str	r1, [r7, #32]
 8002336:	415b      	adcs	r3, r3
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
 800233a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800233e:	4641      	mov	r1, r8
 8002340:	1854      	adds	r4, r2, r1
 8002342:	4649      	mov	r1, r9
 8002344:	eb43 0501 	adc.w	r5, r3, r1
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	00eb      	lsls	r3, r5, #3
 8002352:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002356:	00e2      	lsls	r2, r4, #3
 8002358:	4614      	mov	r4, r2
 800235a:	461d      	mov	r5, r3
 800235c:	4643      	mov	r3, r8
 800235e:	18e3      	adds	r3, r4, r3
 8002360:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002364:	464b      	mov	r3, r9
 8002366:	eb45 0303 	adc.w	r3, r5, r3
 800236a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800236e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800237a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800238a:	4629      	mov	r1, r5
 800238c:	008b      	lsls	r3, r1, #2
 800238e:	4621      	mov	r1, r4
 8002390:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002394:	4621      	mov	r1, r4
 8002396:	008a      	lsls	r2, r1, #2
 8002398:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800239c:	f7fd ff24 	bl	80001e8 <__aeabi_uldivmod>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4b60      	ldr	r3, [pc, #384]	; (8002528 <UART_SetConfig+0x4e4>)
 80023a6:	fba3 2302 	umull	r2, r3, r3, r2
 80023aa:	095b      	lsrs	r3, r3, #5
 80023ac:	011c      	lsls	r4, r3, #4
 80023ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023b2:	2200      	movs	r2, #0
 80023b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80023b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80023bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80023c0:	4642      	mov	r2, r8
 80023c2:	464b      	mov	r3, r9
 80023c4:	1891      	adds	r1, r2, r2
 80023c6:	61b9      	str	r1, [r7, #24]
 80023c8:	415b      	adcs	r3, r3
 80023ca:	61fb      	str	r3, [r7, #28]
 80023cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023d0:	4641      	mov	r1, r8
 80023d2:	1851      	adds	r1, r2, r1
 80023d4:	6139      	str	r1, [r7, #16]
 80023d6:	4649      	mov	r1, r9
 80023d8:	414b      	adcs	r3, r1
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	f04f 0300 	mov.w	r3, #0
 80023e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023e8:	4659      	mov	r1, fp
 80023ea:	00cb      	lsls	r3, r1, #3
 80023ec:	4651      	mov	r1, sl
 80023ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023f2:	4651      	mov	r1, sl
 80023f4:	00ca      	lsls	r2, r1, #3
 80023f6:	4610      	mov	r0, r2
 80023f8:	4619      	mov	r1, r3
 80023fa:	4603      	mov	r3, r0
 80023fc:	4642      	mov	r2, r8
 80023fe:	189b      	adds	r3, r3, r2
 8002400:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002404:	464b      	mov	r3, r9
 8002406:	460a      	mov	r2, r1
 8002408:	eb42 0303 	adc.w	r3, r2, r3
 800240c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	67bb      	str	r3, [r7, #120]	; 0x78
 800241a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	f04f 0300 	mov.w	r3, #0
 8002424:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002428:	4649      	mov	r1, r9
 800242a:	008b      	lsls	r3, r1, #2
 800242c:	4641      	mov	r1, r8
 800242e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002432:	4641      	mov	r1, r8
 8002434:	008a      	lsls	r2, r1, #2
 8002436:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800243a:	f7fd fed5 	bl	80001e8 <__aeabi_uldivmod>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4b39      	ldr	r3, [pc, #228]	; (8002528 <UART_SetConfig+0x4e4>)
 8002444:	fba3 1302 	umull	r1, r3, r3, r2
 8002448:	095b      	lsrs	r3, r3, #5
 800244a:	2164      	movs	r1, #100	; 0x64
 800244c:	fb01 f303 	mul.w	r3, r1, r3
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	3332      	adds	r3, #50	; 0x32
 8002456:	4a34      	ldr	r2, [pc, #208]	; (8002528 <UART_SetConfig+0x4e4>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	095b      	lsrs	r3, r3, #5
 800245e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002462:	441c      	add	r4, r3
 8002464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002468:	2200      	movs	r2, #0
 800246a:	673b      	str	r3, [r7, #112]	; 0x70
 800246c:	677a      	str	r2, [r7, #116]	; 0x74
 800246e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002472:	4642      	mov	r2, r8
 8002474:	464b      	mov	r3, r9
 8002476:	1891      	adds	r1, r2, r2
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	415b      	adcs	r3, r3
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002482:	4641      	mov	r1, r8
 8002484:	1851      	adds	r1, r2, r1
 8002486:	6039      	str	r1, [r7, #0]
 8002488:	4649      	mov	r1, r9
 800248a:	414b      	adcs	r3, r1
 800248c:	607b      	str	r3, [r7, #4]
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	f04f 0300 	mov.w	r3, #0
 8002496:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800249a:	4659      	mov	r1, fp
 800249c:	00cb      	lsls	r3, r1, #3
 800249e:	4651      	mov	r1, sl
 80024a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024a4:	4651      	mov	r1, sl
 80024a6:	00ca      	lsls	r2, r1, #3
 80024a8:	4610      	mov	r0, r2
 80024aa:	4619      	mov	r1, r3
 80024ac:	4603      	mov	r3, r0
 80024ae:	4642      	mov	r2, r8
 80024b0:	189b      	adds	r3, r3, r2
 80024b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80024b4:	464b      	mov	r3, r9
 80024b6:	460a      	mov	r2, r1
 80024b8:	eb42 0303 	adc.w	r3, r2, r3
 80024bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	663b      	str	r3, [r7, #96]	; 0x60
 80024c8:	667a      	str	r2, [r7, #100]	; 0x64
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	f04f 0300 	mov.w	r3, #0
 80024d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80024d6:	4649      	mov	r1, r9
 80024d8:	008b      	lsls	r3, r1, #2
 80024da:	4641      	mov	r1, r8
 80024dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024e0:	4641      	mov	r1, r8
 80024e2:	008a      	lsls	r2, r1, #2
 80024e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80024e8:	f7fd fe7e 	bl	80001e8 <__aeabi_uldivmod>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <UART_SetConfig+0x4e4>)
 80024f2:	fba3 1302 	umull	r1, r3, r3, r2
 80024f6:	095b      	lsrs	r3, r3, #5
 80024f8:	2164      	movs	r1, #100	; 0x64
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	3332      	adds	r3, #50	; 0x32
 8002504:	4a08      	ldr	r2, [pc, #32]	; (8002528 <UART_SetConfig+0x4e4>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	f003 020f 	and.w	r2, r3, #15
 8002510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4422      	add	r2, r4
 8002518:	609a      	str	r2, [r3, #8]
}
 800251a:	bf00      	nop
 800251c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002520:	46bd      	mov	sp, r7
 8002522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002526:	bf00      	nop
 8002528:	51eb851f 	.word	0x51eb851f

0800252c <__libc_init_array>:
 800252c:	b570      	push	{r4, r5, r6, lr}
 800252e:	4d0d      	ldr	r5, [pc, #52]	; (8002564 <__libc_init_array+0x38>)
 8002530:	4c0d      	ldr	r4, [pc, #52]	; (8002568 <__libc_init_array+0x3c>)
 8002532:	1b64      	subs	r4, r4, r5
 8002534:	10a4      	asrs	r4, r4, #2
 8002536:	2600      	movs	r6, #0
 8002538:	42a6      	cmp	r6, r4
 800253a:	d109      	bne.n	8002550 <__libc_init_array+0x24>
 800253c:	4d0b      	ldr	r5, [pc, #44]	; (800256c <__libc_init_array+0x40>)
 800253e:	4c0c      	ldr	r4, [pc, #48]	; (8002570 <__libc_init_array+0x44>)
 8002540:	f000 f818 	bl	8002574 <_init>
 8002544:	1b64      	subs	r4, r4, r5
 8002546:	10a4      	asrs	r4, r4, #2
 8002548:	2600      	movs	r6, #0
 800254a:	42a6      	cmp	r6, r4
 800254c:	d105      	bne.n	800255a <__libc_init_array+0x2e>
 800254e:	bd70      	pop	{r4, r5, r6, pc}
 8002550:	f855 3b04 	ldr.w	r3, [r5], #4
 8002554:	4798      	blx	r3
 8002556:	3601      	adds	r6, #1
 8002558:	e7ee      	b.n	8002538 <__libc_init_array+0xc>
 800255a:	f855 3b04 	ldr.w	r3, [r5], #4
 800255e:	4798      	blx	r3
 8002560:	3601      	adds	r6, #1
 8002562:	e7f2      	b.n	800254a <__libc_init_array+0x1e>
 8002564:	0800259c 	.word	0x0800259c
 8002568:	0800259c 	.word	0x0800259c
 800256c:	0800259c 	.word	0x0800259c
 8002570:	080025a0 	.word	0x080025a0

08002574 <_init>:
 8002574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002576:	bf00      	nop
 8002578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800257a:	bc08      	pop	{r3}
 800257c:	469e      	mov	lr, r3
 800257e:	4770      	bx	lr

08002580 <_fini>:
 8002580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002582:	bf00      	nop
 8002584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002586:	bc08      	pop	{r3}
 8002588:	469e      	mov	lr, r3
 800258a:	4770      	bx	lr
