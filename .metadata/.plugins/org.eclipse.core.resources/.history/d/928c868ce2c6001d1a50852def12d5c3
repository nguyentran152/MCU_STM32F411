
TIMER_BASE_100msIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dd0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f68  08000f68  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f68  08000f68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000f68  08000f68  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f68  08000f68  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f68  08000f68  00010f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f6c  08000f6c  00010f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000f70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08000f7c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08000f7c  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000082f3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001285  00000000  00000000  0002832f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000880  00000000  00000000  000295b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e8  00000000  00000000  00029e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001593f  00000000  00000000  0002a620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c37  00000000  00000000  0003ff5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008be8e  00000000  00000000  00048b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4a24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002330  00000000  00000000  000d4a74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000f50 	.word	0x08000f50

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08000f50 	.word	0x08000f50

080001d8 <SysTick_Handler>:
#include "stm32f4xx_hal.h"

extern TIM_HandleTypeDef htimer10;

void SysTick_Handler(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80001dc:	f000 f94e 	bl	800047c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80001e0:	f000 fa71 	bl	80006c6 <HAL_SYSTICK_IRQHandler>
}
 80001e4:	bf00      	nop
 80001e6:	bd80      	pop	{r7, pc}

080001e8 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler()
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer10);
 80001ec:	4802      	ldr	r0, [pc, #8]	; (80001f8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80001ee:	f000 fcc7 	bl	8000b80 <HAL_TIM_IRQHandler>
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	20000028 	.word	0x20000028

080001fc <main>:
TIM_HandleTypeDef htimer10;



int main()
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	HAL_Init();
 8000200:	f000 f8ea 	bl	80003d8 <HAL_Init>
	SystemClockConfig();
 8000204:	f000 f80a 	bl	800021c <SystemClockConfig>
	GPIO_Init();
 8000208:	f000 f810 	bl	800022c <GPIO_Init>
	TIMER10_Init();
 800020c:	f000 f834 	bl	8000278 <TIMER10_Init>

	HAL_TIM_Base_Start_IT(&htimer10);
 8000210:	4801      	ldr	r0, [pc, #4]	; (8000218 <main+0x1c>)
 8000212:	f000 fc53 	bl	8000abc <HAL_TIM_Base_Start_IT>


	while(1);
 8000216:	e7fe      	b.n	8000216 <main+0x1a>
 8000218:	20000028 	.word	0x20000028

0800021c <SystemClockConfig>:
	return 0;
}


void SystemClockConfig(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0

}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
	...

0800022c <GPIO_Init>:

void GPIO_Init(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b086      	sub	sp, #24
 8000230:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000232:	2300      	movs	r3, #0
 8000234:	603b      	str	r3, [r7, #0]
 8000236:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <GPIO_Init+0x44>)
 8000238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800023a:	4a0d      	ldr	r2, [pc, #52]	; (8000270 <GPIO_Init+0x44>)
 800023c:	f043 0308 	orr.w	r3, r3, #8
 8000240:	6313      	str	r3, [r2, #48]	; 0x30
 8000242:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <GPIO_Init+0x44>)
 8000244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000246:	f003 0308 	and.w	r3, r3, #8
 800024a:	603b      	str	r3, [r7, #0]
 800024c:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_12;
 800024e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000252:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000254:	2301      	movs	r3, #1
 8000256:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 8000258:	2300      	movs	r3, #0
 800025a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD,&ledgpio);
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	4619      	mov	r1, r3
 8000260:	4804      	ldr	r0, [pc, #16]	; (8000274 <GPIO_Init+0x48>)
 8000262:	f000 fa3d 	bl	80006e0 <HAL_GPIO_Init>
}
 8000266:	bf00      	nop
 8000268:	3718      	adds	r7, #24
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40023800 	.word	0x40023800
 8000274:	40020c00 	.word	0x40020c00

08000278 <TIMER10_Init>:

void TIMER10_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	htimer10.Instance = TIM10;
 800027c:	4b0b      	ldr	r3, [pc, #44]	; (80002ac <TIMER10_Init+0x34>)
 800027e:	4a0c      	ldr	r2, [pc, #48]	; (80002b0 <TIMER10_Init+0x38>)
 8000280:	601a      	str	r2, [r3, #0]
	htimer10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000282:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <TIMER10_Init+0x34>)
 8000284:	2200      	movs	r2, #0
 8000286:	609a      	str	r2, [r3, #8]
	htimer10.Init.Prescaler = 24;
 8000288:	4b08      	ldr	r3, [pc, #32]	; (80002ac <TIMER10_Init+0x34>)
 800028a:	2218      	movs	r2, #24
 800028c:	605a      	str	r2, [r3, #4]
	htimer10.Init.Period = 64000-1;
 800028e:	4b07      	ldr	r3, [pc, #28]	; (80002ac <TIMER10_Init+0x34>)
 8000290:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000294:	60da      	str	r2, [r3, #12]

	if(HAL_TIM_Base_Init(&htimer10) != HAL_OK)
 8000296:	4805      	ldr	r0, [pc, #20]	; (80002ac <TIMER10_Init+0x34>)
 8000298:	f000 fbc0 	bl	8000a1c <HAL_TIM_Base_Init>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <TIMER10_Init+0x2e>
	{
		Erorr_Handler();
 80002a2:	f000 f817 	bl	80002d4 <Erorr_Handler>
	}
}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20000028 	.word	0x20000028
 80002b0:	40014400 	.word	0x40014400

080002b4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80002bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002c0:	4803      	ldr	r0, [pc, #12]	; (80002d0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80002c2:	f000 fb91 	bl	80009e8 <HAL_GPIO_TogglePin>
}
 80002c6:	bf00      	nop
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	40020c00 	.word	0x40020c00

080002d4 <Erorr_Handler>:

void Erorr_Handler(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
	while(1);
 80002d8:	e7fe      	b.n	80002d8 <Erorr_Handler+0x4>
	...

080002dc <HAL_MspInit>:

#include "stm32f4xx_hal.h"


void HAL_MspInit(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	//Low level processor specific inits
	//1. Set up the priority grouping of the arm cortex Mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002e0:	2003      	movs	r0, #3
 80002e2:	f000 f9af 	bl	8000644 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the require system exceptions of the arm cortex Mx processor
	//system control block -> System handler control and state register
	SCB->SHCSR |= 0x7 << 16; //usage, bus, memory fault system exceptions
 80002e6:	4b0d      	ldr	r3, [pc, #52]	; (800031c <HAL_MspInit+0x40>)
 80002e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002ea:	4a0c      	ldr	r2, [pc, #48]	; (800031c <HAL_MspInit+0x40>)
 80002ec:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80002f0:	6253      	str	r3, [r2, #36]	; 0x24

	//3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80002f2:	2200      	movs	r2, #0
 80002f4:	2100      	movs	r1, #0
 80002f6:	f06f 000b 	mvn.w	r0, #11
 80002fa:	f000 f9ae 	bl	800065a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80002fe:	2200      	movs	r2, #0
 8000300:	2100      	movs	r1, #0
 8000302:	f06f 000a 	mvn.w	r0, #10
 8000306:	f000 f9a8 	bl	800065a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800030a:	2200      	movs	r2, #0
 800030c:	2100      	movs	r1, #0
 800030e:	f06f 0009 	mvn.w	r0, #9
 8000312:	f000 f9a2 	bl	800065a <HAL_NVIC_SetPriority>
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	e000ed00 	.word	0xe000ed00

08000320 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	//1. Enable the clock for timer 10 peripheral
	__HAL_RCC_TIM10_CLK_ENABLE();
 8000328:	2300      	movs	r3, #0
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	4b0b      	ldr	r3, [pc, #44]	; (800035c <HAL_TIM_Base_MspInit+0x3c>)
 800032e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000330:	4a0a      	ldr	r2, [pc, #40]	; (800035c <HAL_TIM_Base_MspInit+0x3c>)
 8000332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000336:	6453      	str	r3, [r2, #68]	; 0x44
 8000338:	4b08      	ldr	r3, [pc, #32]	; (800035c <HAL_TIM_Base_MspInit+0x3c>)
 800033a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800033c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000340:	60fb      	str	r3, [r7, #12]
 8000342:	68fb      	ldr	r3, [r7, #12]

	//2. Enable the IRQ of timer 10
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000344:	2019      	movs	r0, #25
 8000346:	f000 f9a4 	bl	8000692 <HAL_NVIC_EnableIRQ>

	//3. set up priority
	HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 800034a:	2200      	movs	r2, #0
 800034c:	210f      	movs	r1, #15
 800034e:	2019      	movs	r0, #25
 8000350:	f000 f983 	bl	800065a <HAL_NVIC_SetPriority>
}
 8000354:	bf00      	nop
 8000356:	3710      	adds	r7, #16
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	40023800 	.word	0x40023800

08000360 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <SystemInit+0x20>)
 8000366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800036a:	4a05      	ldr	r2, [pc, #20]	; (8000380 <SystemInit+0x20>)
 800036c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000370:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	e000ed00 	.word	0xe000ed00

08000384 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000384:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000388:	480d      	ldr	r0, [pc, #52]	; (80003c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800038a:	490e      	ldr	r1, [pc, #56]	; (80003c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800038c:	4a0e      	ldr	r2, [pc, #56]	; (80003c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000390:	e002      	b.n	8000398 <LoopCopyDataInit>

08000392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000396:	3304      	adds	r3, #4

08000398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800039a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800039c:	d3f9      	bcc.n	8000392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800039e:	4a0b      	ldr	r2, [pc, #44]	; (80003cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80003a0:	4c0b      	ldr	r4, [pc, #44]	; (80003d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80003a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a4:	e001      	b.n	80003aa <LoopFillZerobss>

080003a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a8:	3204      	adds	r2, #4

080003aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003ac:	d3fb      	bcc.n	80003a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80003ae:	f7ff ffd7 	bl	8000360 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003b2:	f000 fda9 	bl	8000f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003b6:	f7ff ff21 	bl	80001fc <main>
  bx  lr    
 80003ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80003bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80003c8:	08000f70 	.word	0x08000f70
  ldr r2, =_sbss
 80003cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80003d0:	20000074 	.word	0x20000074

080003d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003d4:	e7fe      	b.n	80003d4 <ADC_IRQHandler>
	...

080003d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80003dc:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <HAL_Init+0x40>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a0d      	ldr	r2, [pc, #52]	; (8000418 <HAL_Init+0x40>)
 80003e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80003e8:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <HAL_Init+0x40>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a0a      	ldr	r2, [pc, #40]	; (8000418 <HAL_Init+0x40>)
 80003ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003f4:	4b08      	ldr	r3, [pc, #32]	; (8000418 <HAL_Init+0x40>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a07      	ldr	r2, [pc, #28]	; (8000418 <HAL_Init+0x40>)
 80003fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000400:	2003      	movs	r0, #3
 8000402:	f000 f91f 	bl	8000644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000406:	2000      	movs	r0, #0
 8000408:	f000 f808 	bl	800041c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800040c:	f7ff ff66 	bl	80002dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000410:	2300      	movs	r3, #0
}
 8000412:	4618      	mov	r0, r3
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40023c00 	.word	0x40023c00

0800041c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000424:	4b12      	ldr	r3, [pc, #72]	; (8000470 <HAL_InitTick+0x54>)
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	4b12      	ldr	r3, [pc, #72]	; (8000474 <HAL_InitTick+0x58>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	4619      	mov	r1, r3
 800042e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000432:	fbb3 f3f1 	udiv	r3, r3, r1
 8000436:	fbb2 f3f3 	udiv	r3, r2, r3
 800043a:	4618      	mov	r0, r3
 800043c:	f000 f937 	bl	80006ae <HAL_SYSTICK_Config>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000446:	2301      	movs	r3, #1
 8000448:	e00e      	b.n	8000468 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	2b0f      	cmp	r3, #15
 800044e:	d80a      	bhi.n	8000466 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000450:	2200      	movs	r2, #0
 8000452:	6879      	ldr	r1, [r7, #4]
 8000454:	f04f 30ff 	mov.w	r0, #4294967295
 8000458:	f000 f8ff 	bl	800065a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800045c:	4a06      	ldr	r2, [pc, #24]	; (8000478 <HAL_InitTick+0x5c>)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000462:	2300      	movs	r3, #0
 8000464:	e000      	b.n	8000468 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000466:	2301      	movs	r3, #1
}
 8000468:	4618      	mov	r0, r3
 800046a:	3708      	adds	r7, #8
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	20000000 	.word	0x20000000
 8000474:	20000008 	.word	0x20000008
 8000478:	20000004 	.word	0x20000004

0800047c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <HAL_IncTick+0x20>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	461a      	mov	r2, r3
 8000486:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <HAL_IncTick+0x24>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4413      	add	r3, r2
 800048c:	4a04      	ldr	r2, [pc, #16]	; (80004a0 <HAL_IncTick+0x24>)
 800048e:	6013      	str	r3, [r2, #0]
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	20000008 	.word	0x20000008
 80004a0:	20000070 	.word	0x20000070

080004a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	f003 0307 	and.w	r3, r3, #7
 80004b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <__NVIC_SetPriorityGrouping+0x44>)
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004ba:	68ba      	ldr	r2, [r7, #8]
 80004bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80004c0:	4013      	ands	r3, r2
 80004c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004c8:	68bb      	ldr	r3, [r7, #8]
 80004ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80004cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80004d6:	4a04      	ldr	r2, [pc, #16]	; (80004e8 <__NVIC_SetPriorityGrouping+0x44>)
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	60d3      	str	r3, [r2, #12]
}
 80004dc:	bf00      	nop
 80004de:	3714      	adds	r7, #20
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	e000ed00 	.word	0xe000ed00

080004ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004f0:	4b04      	ldr	r3, [pc, #16]	; (8000504 <__NVIC_GetPriorityGrouping+0x18>)
 80004f2:	68db      	ldr	r3, [r3, #12]
 80004f4:	0a1b      	lsrs	r3, r3, #8
 80004f6:	f003 0307 	and.w	r3, r3, #7
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	e000ed00 	.word	0xe000ed00

08000508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000516:	2b00      	cmp	r3, #0
 8000518:	db0b      	blt.n	8000532 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	f003 021f 	and.w	r2, r3, #31
 8000520:	4907      	ldr	r1, [pc, #28]	; (8000540 <__NVIC_EnableIRQ+0x38>)
 8000522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000526:	095b      	lsrs	r3, r3, #5
 8000528:	2001      	movs	r0, #1
 800052a:	fa00 f202 	lsl.w	r2, r0, r2
 800052e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	e000e100 	.word	0xe000e100

08000544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	6039      	str	r1, [r7, #0]
 800054e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000554:	2b00      	cmp	r3, #0
 8000556:	db0a      	blt.n	800056e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	b2da      	uxtb	r2, r3
 800055c:	490c      	ldr	r1, [pc, #48]	; (8000590 <__NVIC_SetPriority+0x4c>)
 800055e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000562:	0112      	lsls	r2, r2, #4
 8000564:	b2d2      	uxtb	r2, r2
 8000566:	440b      	add	r3, r1
 8000568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800056c:	e00a      	b.n	8000584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	b2da      	uxtb	r2, r3
 8000572:	4908      	ldr	r1, [pc, #32]	; (8000594 <__NVIC_SetPriority+0x50>)
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	f003 030f 	and.w	r3, r3, #15
 800057a:	3b04      	subs	r3, #4
 800057c:	0112      	lsls	r2, r2, #4
 800057e:	b2d2      	uxtb	r2, r2
 8000580:	440b      	add	r3, r1
 8000582:	761a      	strb	r2, [r3, #24]
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	e000e100 	.word	0xe000e100
 8000594:	e000ed00 	.word	0xe000ed00

08000598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000598:	b480      	push	{r7}
 800059a:	b089      	sub	sp, #36	; 0x24
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	f003 0307 	and.w	r3, r3, #7
 80005aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ac:	69fb      	ldr	r3, [r7, #28]
 80005ae:	f1c3 0307 	rsb	r3, r3, #7
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	bf28      	it	cs
 80005b6:	2304      	movcs	r3, #4
 80005b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ba:	69fb      	ldr	r3, [r7, #28]
 80005bc:	3304      	adds	r3, #4
 80005be:	2b06      	cmp	r3, #6
 80005c0:	d902      	bls.n	80005c8 <NVIC_EncodePriority+0x30>
 80005c2:	69fb      	ldr	r3, [r7, #28]
 80005c4:	3b03      	subs	r3, #3
 80005c6:	e000      	b.n	80005ca <NVIC_EncodePriority+0x32>
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005cc:	f04f 32ff 	mov.w	r2, #4294967295
 80005d0:	69bb      	ldr	r3, [r7, #24]
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	43da      	mvns	r2, r3
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	401a      	ands	r2, r3
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005e0:	f04f 31ff 	mov.w	r1, #4294967295
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ea:	43d9      	mvns	r1, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f0:	4313      	orrs	r3, r2
         );
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3724      	adds	r7, #36	; 0x24
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f7ff ff8e 	bl	8000544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f7ff ff29 	bl	80004a4 <__NVIC_SetPriorityGrouping>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800065a:	b580      	push	{r7, lr}
 800065c:	b086      	sub	sp, #24
 800065e:	af00      	add	r7, sp, #0
 8000660:	4603      	mov	r3, r0
 8000662:	60b9      	str	r1, [r7, #8]
 8000664:	607a      	str	r2, [r7, #4]
 8000666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800066c:	f7ff ff3e 	bl	80004ec <__NVIC_GetPriorityGrouping>
 8000670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	68b9      	ldr	r1, [r7, #8]
 8000676:	6978      	ldr	r0, [r7, #20]
 8000678:	f7ff ff8e 	bl	8000598 <NVIC_EncodePriority>
 800067c:	4602      	mov	r2, r0
 800067e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000682:	4611      	mov	r1, r2
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ff5d 	bl	8000544 <__NVIC_SetPriority>
}
 800068a:	bf00      	nop
 800068c:	3718      	adds	r7, #24
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	4603      	mov	r3, r0
 800069a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ff31 	bl	8000508 <__NVIC_EnableIRQ>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff ffa2 	bl	8000600 <SysTick_Config>
 80006bc:	4603      	mov	r3, r0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80006ca:	f000 f802 	bl	80006d2 <HAL_SYSTICK_Callback>
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b089      	sub	sp, #36	; 0x24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
 80006fa:	e159      	b.n	80009b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80006fc:	2201      	movs	r2, #1
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	fa02 f303 	lsl.w	r3, r2, r3
 8000704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	697a      	ldr	r2, [r7, #20]
 800070c:	4013      	ands	r3, r2
 800070e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000710:	693a      	ldr	r2, [r7, #16]
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	429a      	cmp	r2, r3
 8000716:	f040 8148 	bne.w	80009aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	f003 0303 	and.w	r3, r3, #3
 8000722:	2b01      	cmp	r3, #1
 8000724:	d005      	beq.n	8000732 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800072e:	2b02      	cmp	r3, #2
 8000730:	d130      	bne.n	8000794 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	689b      	ldr	r3, [r3, #8]
 8000736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	2203      	movs	r2, #3
 800073e:	fa02 f303 	lsl.w	r3, r2, r3
 8000742:	43db      	mvns	r3, r3
 8000744:	69ba      	ldr	r2, [r7, #24]
 8000746:	4013      	ands	r3, r2
 8000748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	68da      	ldr	r2, [r3, #12]
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	fa02 f303 	lsl.w	r3, r2, r3
 8000756:	69ba      	ldr	r2, [r7, #24]
 8000758:	4313      	orrs	r3, r2
 800075a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	69ba      	ldr	r2, [r7, #24]
 8000760:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000768:	2201      	movs	r2, #1
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	fa02 f303 	lsl.w	r3, r2, r3
 8000770:	43db      	mvns	r3, r3
 8000772:	69ba      	ldr	r2, [r7, #24]
 8000774:	4013      	ands	r3, r2
 8000776:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	091b      	lsrs	r3, r3, #4
 800077e:	f003 0201 	and.w	r2, r3, #1
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	fa02 f303 	lsl.w	r3, r2, r3
 8000788:	69ba      	ldr	r2, [r7, #24]
 800078a:	4313      	orrs	r3, r2
 800078c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	69ba      	ldr	r2, [r7, #24]
 8000792:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	f003 0303 	and.w	r3, r3, #3
 800079c:	2b03      	cmp	r3, #3
 800079e:	d017      	beq.n	80007d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	2203      	movs	r2, #3
 80007ac:	fa02 f303 	lsl.w	r3, r2, r3
 80007b0:	43db      	mvns	r3, r3
 80007b2:	69ba      	ldr	r2, [r7, #24]
 80007b4:	4013      	ands	r3, r2
 80007b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	689a      	ldr	r2, [r3, #8]
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	fa02 f303 	lsl.w	r3, r2, r3
 80007c4:	69ba      	ldr	r2, [r7, #24]
 80007c6:	4313      	orrs	r3, r2
 80007c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	69ba      	ldr	r2, [r7, #24]
 80007ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	f003 0303 	and.w	r3, r3, #3
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d123      	bne.n	8000824 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	08da      	lsrs	r2, r3, #3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3208      	adds	r2, #8
 80007e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	f003 0307 	and.w	r3, r3, #7
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	220f      	movs	r2, #15
 80007f4:	fa02 f303 	lsl.w	r3, r2, r3
 80007f8:	43db      	mvns	r3, r3
 80007fa:	69ba      	ldr	r2, [r7, #24]
 80007fc:	4013      	ands	r3, r2
 80007fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	691a      	ldr	r2, [r3, #16]
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	69ba      	ldr	r2, [r7, #24]
 8000812:	4313      	orrs	r3, r2
 8000814:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	08da      	lsrs	r2, r3, #3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	3208      	adds	r2, #8
 800081e:	69b9      	ldr	r1, [r7, #24]
 8000820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	2203      	movs	r2, #3
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	43db      	mvns	r3, r3
 8000836:	69ba      	ldr	r2, [r7, #24]
 8000838:	4013      	ands	r3, r2
 800083a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	f003 0203 	and.w	r2, r3, #3
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	fa02 f303 	lsl.w	r3, r2, r3
 800084c:	69ba      	ldr	r2, [r7, #24]
 800084e:	4313      	orrs	r3, r2
 8000850:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	69ba      	ldr	r2, [r7, #24]
 8000856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000860:	2b00      	cmp	r3, #0
 8000862:	f000 80a2 	beq.w	80009aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	4b57      	ldr	r3, [pc, #348]	; (80009c8 <HAL_GPIO_Init+0x2e8>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	4a56      	ldr	r2, [pc, #344]	; (80009c8 <HAL_GPIO_Init+0x2e8>)
 8000870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000874:	6453      	str	r3, [r2, #68]	; 0x44
 8000876:	4b54      	ldr	r3, [pc, #336]	; (80009c8 <HAL_GPIO_Init+0x2e8>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000882:	4a52      	ldr	r2, [pc, #328]	; (80009cc <HAL_GPIO_Init+0x2ec>)
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	089b      	lsrs	r3, r3, #2
 8000888:	3302      	adds	r3, #2
 800088a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800088e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	f003 0303 	and.w	r3, r3, #3
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	220f      	movs	r2, #15
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	43db      	mvns	r3, r3
 80008a0:	69ba      	ldr	r2, [r7, #24]
 80008a2:	4013      	ands	r3, r2
 80008a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a49      	ldr	r2, [pc, #292]	; (80009d0 <HAL_GPIO_Init+0x2f0>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d019      	beq.n	80008e2 <HAL_GPIO_Init+0x202>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4a48      	ldr	r2, [pc, #288]	; (80009d4 <HAL_GPIO_Init+0x2f4>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d013      	beq.n	80008de <HAL_GPIO_Init+0x1fe>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a47      	ldr	r2, [pc, #284]	; (80009d8 <HAL_GPIO_Init+0x2f8>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d00d      	beq.n	80008da <HAL_GPIO_Init+0x1fa>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4a46      	ldr	r2, [pc, #280]	; (80009dc <HAL_GPIO_Init+0x2fc>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d007      	beq.n	80008d6 <HAL_GPIO_Init+0x1f6>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a45      	ldr	r2, [pc, #276]	; (80009e0 <HAL_GPIO_Init+0x300>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d101      	bne.n	80008d2 <HAL_GPIO_Init+0x1f2>
 80008ce:	2304      	movs	r3, #4
 80008d0:	e008      	b.n	80008e4 <HAL_GPIO_Init+0x204>
 80008d2:	2307      	movs	r3, #7
 80008d4:	e006      	b.n	80008e4 <HAL_GPIO_Init+0x204>
 80008d6:	2303      	movs	r3, #3
 80008d8:	e004      	b.n	80008e4 <HAL_GPIO_Init+0x204>
 80008da:	2302      	movs	r3, #2
 80008dc:	e002      	b.n	80008e4 <HAL_GPIO_Init+0x204>
 80008de:	2301      	movs	r3, #1
 80008e0:	e000      	b.n	80008e4 <HAL_GPIO_Init+0x204>
 80008e2:	2300      	movs	r3, #0
 80008e4:	69fa      	ldr	r2, [r7, #28]
 80008e6:	f002 0203 	and.w	r2, r2, #3
 80008ea:	0092      	lsls	r2, r2, #2
 80008ec:	4093      	lsls	r3, r2
 80008ee:	69ba      	ldr	r2, [r7, #24]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80008f4:	4935      	ldr	r1, [pc, #212]	; (80009cc <HAL_GPIO_Init+0x2ec>)
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	089b      	lsrs	r3, r3, #2
 80008fa:	3302      	adds	r3, #2
 80008fc:	69ba      	ldr	r2, [r7, #24]
 80008fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000902:	4b38      	ldr	r3, [pc, #224]	; (80009e4 <HAL_GPIO_Init+0x304>)
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	43db      	mvns	r3, r3
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	4013      	ands	r3, r2
 8000910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800091a:	2b00      	cmp	r3, #0
 800091c:	d003      	beq.n	8000926 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	4313      	orrs	r3, r2
 8000924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000926:	4a2f      	ldr	r2, [pc, #188]	; (80009e4 <HAL_GPIO_Init+0x304>)
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800092c:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <HAL_GPIO_Init+0x304>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	43db      	mvns	r3, r3
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	4013      	ands	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000944:	2b00      	cmp	r3, #0
 8000946:	d003      	beq.n	8000950 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	4313      	orrs	r3, r2
 800094e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000950:	4a24      	ldr	r2, [pc, #144]	; (80009e4 <HAL_GPIO_Init+0x304>)
 8000952:	69bb      	ldr	r3, [r7, #24]
 8000954:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000956:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <HAL_GPIO_Init+0x304>)
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	43db      	mvns	r3, r3
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	4013      	ands	r3, r2
 8000964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800096e:	2b00      	cmp	r3, #0
 8000970:	d003      	beq.n	800097a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000972:	69ba      	ldr	r2, [r7, #24]
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	4313      	orrs	r3, r2
 8000978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800097a:	4a1a      	ldr	r2, [pc, #104]	; (80009e4 <HAL_GPIO_Init+0x304>)
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000980:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <HAL_GPIO_Init+0x304>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	43db      	mvns	r3, r3
 800098a:	69ba      	ldr	r2, [r7, #24]
 800098c:	4013      	ands	r3, r2
 800098e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000998:	2b00      	cmp	r3, #0
 800099a:	d003      	beq.n	80009a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009a4:	4a0f      	ldr	r2, [pc, #60]	; (80009e4 <HAL_GPIO_Init+0x304>)
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3301      	adds	r3, #1
 80009ae:	61fb      	str	r3, [r7, #28]
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	2b0f      	cmp	r3, #15
 80009b4:	f67f aea2 	bls.w	80006fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80009b8:	bf00      	nop
 80009ba:	bf00      	nop
 80009bc:	3724      	adds	r7, #36	; 0x24
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40013800 	.word	0x40013800
 80009d0:	40020000 	.word	0x40020000
 80009d4:	40020400 	.word	0x40020400
 80009d8:	40020800 	.word	0x40020800
 80009dc:	40020c00 	.word	0x40020c00
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40013c00 	.word	0x40013c00

080009e8 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80009fa:	887a      	ldrh	r2, [r7, #2]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4013      	ands	r3, r2
 8000a00:	041a      	lsls	r2, r3, #16
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	43d9      	mvns	r1, r3
 8000a06:	887b      	ldrh	r3, [r7, #2]
 8000a08:	400b      	ands	r3, r1
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	619a      	str	r2, [r3, #24]
}
 8000a10:	bf00      	nop
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d101      	bne.n	8000a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e041      	b.n	8000ab2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d106      	bne.n	8000a48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff fc6c 	bl	8000320 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3304      	adds	r3, #4
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	f000 f9c0 	bl	8000de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2201      	movs	r2, #1
 8000a64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2201      	movs	r2, #1
 8000a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2201      	movs	r2, #1
 8000a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2201      	movs	r2, #1
 8000a94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2201      	movs	r2, #1
 8000aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d001      	beq.n	8000ad4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e044      	b.n	8000b5e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	68da      	ldr	r2, [r3, #12]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f042 0201 	orr.w	r2, r2, #1
 8000aea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a1e      	ldr	r2, [pc, #120]	; (8000b6c <HAL_TIM_Base_Start_IT+0xb0>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d018      	beq.n	8000b28 <HAL_TIM_Base_Start_IT+0x6c>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000afe:	d013      	beq.n	8000b28 <HAL_TIM_Base_Start_IT+0x6c>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a1a      	ldr	r2, [pc, #104]	; (8000b70 <HAL_TIM_Base_Start_IT+0xb4>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d00e      	beq.n	8000b28 <HAL_TIM_Base_Start_IT+0x6c>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a19      	ldr	r2, [pc, #100]	; (8000b74 <HAL_TIM_Base_Start_IT+0xb8>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d009      	beq.n	8000b28 <HAL_TIM_Base_Start_IT+0x6c>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a17      	ldr	r2, [pc, #92]	; (8000b78 <HAL_TIM_Base_Start_IT+0xbc>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d004      	beq.n	8000b28 <HAL_TIM_Base_Start_IT+0x6c>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a16      	ldr	r2, [pc, #88]	; (8000b7c <HAL_TIM_Base_Start_IT+0xc0>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d111      	bne.n	8000b4c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	689b      	ldr	r3, [r3, #8]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	2b06      	cmp	r3, #6
 8000b38:	d010      	beq.n	8000b5c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f042 0201 	orr.w	r2, r2, #1
 8000b48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000b4a:	e007      	b.n	8000b5c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f042 0201 	orr.w	r2, r2, #1
 8000b5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40010000 	.word	0x40010000
 8000b70:	40000400 	.word	0x40000400
 8000b74:	40000800 	.word	0x40000800
 8000b78:	40000c00 	.word	0x40000c00
 8000b7c:	40014000 	.word	0x40014000

08000b80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	691b      	ldr	r3, [r3, #16]
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d122      	bne.n	8000bdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	f003 0302 	and.w	r3, r3, #2
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d11b      	bne.n	8000bdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f06f 0202 	mvn.w	r2, #2
 8000bac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	f003 0303 	and.w	r3, r3, #3
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d003      	beq.n	8000bca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f000 f8ee 	bl	8000da4 <HAL_TIM_IC_CaptureCallback>
 8000bc8:	e005      	b.n	8000bd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f000 f8e0 	bl	8000d90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f000 f8f1 	bl	8000db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	691b      	ldr	r3, [r3, #16]
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	d122      	bne.n	8000c30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	f003 0304 	and.w	r3, r3, #4
 8000bf4:	2b04      	cmp	r3, #4
 8000bf6:	d11b      	bne.n	8000c30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f06f 0204 	mvn.w	r2, #4
 8000c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2202      	movs	r2, #2
 8000c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f000 f8c4 	bl	8000da4 <HAL_TIM_IC_CaptureCallback>
 8000c1c:	e005      	b.n	8000c2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f000 f8b6 	bl	8000d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f000 f8c7 	bl	8000db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	691b      	ldr	r3, [r3, #16]
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	2b08      	cmp	r3, #8
 8000c3c:	d122      	bne.n	8000c84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	f003 0308 	and.w	r3, r3, #8
 8000c48:	2b08      	cmp	r3, #8
 8000c4a:	d11b      	bne.n	8000c84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f06f 0208 	mvn.w	r2, #8
 8000c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2204      	movs	r2, #4
 8000c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	f003 0303 	and.w	r3, r3, #3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d003      	beq.n	8000c72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f000 f89a 	bl	8000da4 <HAL_TIM_IC_CaptureCallback>
 8000c70:	e005      	b.n	8000c7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f000 f88c 	bl	8000d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f000 f89d 	bl	8000db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	691b      	ldr	r3, [r3, #16]
 8000c8a:	f003 0310 	and.w	r3, r3, #16
 8000c8e:	2b10      	cmp	r3, #16
 8000c90:	d122      	bne.n	8000cd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	f003 0310 	and.w	r3, r3, #16
 8000c9c:	2b10      	cmp	r3, #16
 8000c9e:	d11b      	bne.n	8000cd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f06f 0210 	mvn.w	r2, #16
 8000ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2208      	movs	r2, #8
 8000cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d003      	beq.n	8000cc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f000 f870 	bl	8000da4 <HAL_TIM_IC_CaptureCallback>
 8000cc4:	e005      	b.n	8000cd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f000 f862 	bl	8000d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f000 f873 	bl	8000db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	691b      	ldr	r3, [r3, #16]
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d10e      	bne.n	8000d04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d107      	bne.n	8000d04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f06f 0201 	mvn.w	r2, #1
 8000cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff fad8 	bl	80002b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	691b      	ldr	r3, [r3, #16]
 8000d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d0e:	2b80      	cmp	r3, #128	; 0x80
 8000d10:	d10e      	bne.n	8000d30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d1c:	2b80      	cmp	r3, #128	; 0x80
 8000d1e:	d107      	bne.n	8000d30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f000 f8e2 	bl	8000ef4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	691b      	ldr	r3, [r3, #16]
 8000d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d3a:	2b40      	cmp	r3, #64	; 0x40
 8000d3c:	d10e      	bne.n	8000d5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d48:	2b40      	cmp	r3, #64	; 0x40
 8000d4a:	d107      	bne.n	8000d5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f000 f838 	bl	8000dcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	691b      	ldr	r3, [r3, #16]
 8000d62:	f003 0320 	and.w	r3, r3, #32
 8000d66:	2b20      	cmp	r3, #32
 8000d68:	d10e      	bne.n	8000d88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	f003 0320 	and.w	r3, r3, #32
 8000d74:	2b20      	cmp	r3, #32
 8000d76:	d107      	bne.n	8000d88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f06f 0220 	mvn.w	r2, #32
 8000d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f000 f8ac 	bl	8000ee0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a34      	ldr	r2, [pc, #208]	; (8000ec4 <TIM_Base_SetConfig+0xe4>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d00f      	beq.n	8000e18 <TIM_Base_SetConfig+0x38>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dfe:	d00b      	beq.n	8000e18 <TIM_Base_SetConfig+0x38>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a31      	ldr	r2, [pc, #196]	; (8000ec8 <TIM_Base_SetConfig+0xe8>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d007      	beq.n	8000e18 <TIM_Base_SetConfig+0x38>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a30      	ldr	r2, [pc, #192]	; (8000ecc <TIM_Base_SetConfig+0xec>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d003      	beq.n	8000e18 <TIM_Base_SetConfig+0x38>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a2f      	ldr	r2, [pc, #188]	; (8000ed0 <TIM_Base_SetConfig+0xf0>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d108      	bne.n	8000e2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	68fa      	ldr	r2, [r7, #12]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a25      	ldr	r2, [pc, #148]	; (8000ec4 <TIM_Base_SetConfig+0xe4>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d01b      	beq.n	8000e6a <TIM_Base_SetConfig+0x8a>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e38:	d017      	beq.n	8000e6a <TIM_Base_SetConfig+0x8a>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a22      	ldr	r2, [pc, #136]	; (8000ec8 <TIM_Base_SetConfig+0xe8>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d013      	beq.n	8000e6a <TIM_Base_SetConfig+0x8a>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a21      	ldr	r2, [pc, #132]	; (8000ecc <TIM_Base_SetConfig+0xec>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d00f      	beq.n	8000e6a <TIM_Base_SetConfig+0x8a>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a20      	ldr	r2, [pc, #128]	; (8000ed0 <TIM_Base_SetConfig+0xf0>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d00b      	beq.n	8000e6a <TIM_Base_SetConfig+0x8a>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a1f      	ldr	r2, [pc, #124]	; (8000ed4 <TIM_Base_SetConfig+0xf4>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d007      	beq.n	8000e6a <TIM_Base_SetConfig+0x8a>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a1e      	ldr	r2, [pc, #120]	; (8000ed8 <TIM_Base_SetConfig+0xf8>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d003      	beq.n	8000e6a <TIM_Base_SetConfig+0x8a>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a1d      	ldr	r2, [pc, #116]	; (8000edc <TIM_Base_SetConfig+0xfc>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d108      	bne.n	8000e7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a08      	ldr	r2, [pc, #32]	; (8000ec4 <TIM_Base_SetConfig+0xe4>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d103      	bne.n	8000eb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	691a      	ldr	r2, [r3, #16]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	615a      	str	r2, [r3, #20]
}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40010000 	.word	0x40010000
 8000ec8:	40000400 	.word	0x40000400
 8000ecc:	40000800 	.word	0x40000800
 8000ed0:	40000c00 	.word	0x40000c00
 8000ed4:	40014000 	.word	0x40014000
 8000ed8:	40014400 	.word	0x40014400
 8000edc:	40014800 	.word	0x40014800

08000ee0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <__libc_init_array>:
 8000f08:	b570      	push	{r4, r5, r6, lr}
 8000f0a:	4d0d      	ldr	r5, [pc, #52]	; (8000f40 <__libc_init_array+0x38>)
 8000f0c:	4c0d      	ldr	r4, [pc, #52]	; (8000f44 <__libc_init_array+0x3c>)
 8000f0e:	1b64      	subs	r4, r4, r5
 8000f10:	10a4      	asrs	r4, r4, #2
 8000f12:	2600      	movs	r6, #0
 8000f14:	42a6      	cmp	r6, r4
 8000f16:	d109      	bne.n	8000f2c <__libc_init_array+0x24>
 8000f18:	4d0b      	ldr	r5, [pc, #44]	; (8000f48 <__libc_init_array+0x40>)
 8000f1a:	4c0c      	ldr	r4, [pc, #48]	; (8000f4c <__libc_init_array+0x44>)
 8000f1c:	f000 f818 	bl	8000f50 <_init>
 8000f20:	1b64      	subs	r4, r4, r5
 8000f22:	10a4      	asrs	r4, r4, #2
 8000f24:	2600      	movs	r6, #0
 8000f26:	42a6      	cmp	r6, r4
 8000f28:	d105      	bne.n	8000f36 <__libc_init_array+0x2e>
 8000f2a:	bd70      	pop	{r4, r5, r6, pc}
 8000f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f30:	4798      	blx	r3
 8000f32:	3601      	adds	r6, #1
 8000f34:	e7ee      	b.n	8000f14 <__libc_init_array+0xc>
 8000f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f3a:	4798      	blx	r3
 8000f3c:	3601      	adds	r6, #1
 8000f3e:	e7f2      	b.n	8000f26 <__libc_init_array+0x1e>
 8000f40:	08000f68 	.word	0x08000f68
 8000f44:	08000f68 	.word	0x08000f68
 8000f48:	08000f68 	.word	0x08000f68
 8000f4c:	08000f6c 	.word	0x08000f6c

08000f50 <_init>:
 8000f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f52:	bf00      	nop
 8000f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f56:	bc08      	pop	{r3}
 8000f58:	469e      	mov	lr, r3
 8000f5a:	4770      	bx	lr

08000f5c <_fini>:
 8000f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5e:	bf00      	nop
 8000f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f62:	bc08      	pop	{r3}
 8000f64:	469e      	mov	lr, r3
 8000f66:	4770      	bx	lr
