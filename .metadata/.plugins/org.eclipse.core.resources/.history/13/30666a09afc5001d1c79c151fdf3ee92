/*
 * main.c
 *
 *  Created on: Jul 15, 2022
 *      Author: Nguyen Tran
 */



#include "main.h"
#include <string.h>
#include <stdio.h>

#define TRUE 	1
#define FALSE	0

void SystemClockConfig_HSE(uint8_t clock_freq);
void Error_Handler(void);
void GPIO_Init(void);
void TIMER2_Init(void);
void SystemClockConfig(uint8_t clock_freq);
void MCO_Configuration(void);
void UART2_Init(void);

TIM_HandleTypeDef htimer2;
UART_HandleTypeDef huart2;

uint32_t input_capture[2] = {0};
uint8_t count = 1;
uint8_t is_capture_done = FALSE;

int main()
{
	uint32_t capture_difference =0;
	double timer2_cnt_freq=0;
	double timer2_cnt_res=0;
	double user_signal_time_period =0;
	double user_signal_freq=0;
	char usr_msg[100];

	HAL_Init();
	SystemClockConfig(SYSCLK_CONF_FREQ_50MHz);
//	SystemClockConfig_HSE(SYSCLK_CONF_FREQ_50MHz);
	GPIO_Init();

	UART2_Init();

	TIMER2_Init();

	MCO_Configuration();



	while(1)
	{
		if(is_capture_done)
		{
			if(input_capture[1] > input_capture[0])
				capture_difference = input_capture[1] - input_capture[0];
			else
				capture_difference = (0XFFFFFFFF - input_capture[0]) + input_capture[1];


		timer2_cnt_freq = (HAL_RCC_GetPCLK1Freq() * 2 ) / (htimer2.Init.Prescaler + 1);
		timer2_cnt_res = 1/ timer2_cnt_freq;
		user_signal_time_period = capture_difference * timer2_cnt_res;
		user_signal_freq = 1/user_signal_time_period ;

		sprintf(usr_msg,"Frequency of the signal applied = %.2f Hz\r\n",user_signal_freq );
		HAL_UART_Transmit(&huart2,(uint8_t*)usr_msg,strlen(usr_msg),HAL_MAX_DELAY);

		is_capture_done = FALSE;

		}

	}
	return 0;
}



void GPIO_Init(void)
{
    __HAL_RCC_GPIOD_CLK_ENABLE();
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_12;
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
	ledgpio.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOD,&ledgpio);
}

void SystemClockConfig(uint8_t clock_freq)
{
	RCC_OscInitTypeDef osc_inits;
	RCC_ClkInitTypeDef clk_inits;

	uint32_t FLatency = 0;

	osc_inits.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
	osc_inits.LSIState = RCC_LSI_ON;
	osc_inits.HSIState = RCC_HSI_ON;
	osc_inits.HSICalibrationValue = 16; //default
	osc_inits.PLL.PLLState = RCC_PLL_ON;
	osc_inits.PLL.PLLSource = RCC_PLLSOURCE_HSI;


	switch(clock_freq)
	{
		case SYSCLK_CONF_FREQ_50MHz:
		{
			osc_inits.PLL.PLLM = 16;
			osc_inits.PLL.PLLN = 100;
			osc_inits.PLL.PLLP = 2;
			osc_inits.PLL.PLLQ = 8;

			clk_inits.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
									RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
			clk_inits.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK; //50MHz
			clk_inits.AHBCLKDivider = RCC_SYSCLK_DIV1; // 50MHz AHB
			clk_inits.APB1CLKDivider = RCC_HCLK_DIV2; // 25MHz APB1
			clk_inits.APB2CLKDivider = RCC_HCLK_DIV2;// 25MHz APB2

			FLatency = FLASH_LATENCY_1;

			break;
		}
		case SYSCLK_CONF_FREQ_80MHz:
		{
			osc_inits.PLL.PLLM = 16;
			osc_inits.PLL.PLLN = 160;
			osc_inits.PLL.PLLP = 2;
			osc_inits.PLL.PLLQ = 8;

			clk_inits.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
									RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
			clk_inits.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK; //80MHz
			clk_inits.AHBCLKDivider = RCC_SYSCLK_DIV1; // 80MHz AHB
			clk_inits.APB1CLKDivider = RCC_HCLK_DIV2; // 40MHz APB1
			clk_inits.APB2CLKDivider = RCC_HCLK_DIV2;// 40MHz APB2

			FLatency = FLASH_LATENCY_2;

			break;
		}
		case SYSCLK_CONF_FREQ_100MHz:
		{
			osc_inits.PLL.PLLM = 16;
			osc_inits.PLL.PLLN = 200;
			osc_inits.PLL.PLLP = 2;
			osc_inits.PLL.PLLQ = 8;

			clk_inits.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
									RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
			clk_inits.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK; //100MHz
			clk_inits.AHBCLKDivider = RCC_SYSCLK_DIV1; // 100MHz AHB
			clk_inits.APB1CLKDivider = RCC_HCLK_DIV4; // 25MHz APB1
			clk_inits.APB2CLKDivider = RCC_HCLK_DIV2;// 50MHz APB2

			FLatency = FLASH_LATENCY_3;

			break;
		}
		default:
			return;
	}

	if(HAL_RCC_OscConfig(&osc_inits) != HAL_OK)
	{
		Error_Handler();
	}

	if(HAL_RCC_ClockConfig(&clk_inits, FLatency) != HAL_OK)
	{
		Error_Handler();
	}

	//configure systick

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

}

void SystemClockConfig_HSE(uint8_t clock_freq)
{
	RCC_OscInitTypeDef osc_inits;
	RCC_ClkInitTypeDef clk_inits;

	uint32_t FLatency  = 0;
	osc_inits.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
	osc_inits.HSEState = RCC_HSE_ON;
	osc_inits.HSIState = RCC_HSI_ON;
	osc_inits.LSEState = RCC_LSE_ON;
	osc_inits.PLL.PLLState = RCC_PLL_ON;
	osc_inits.PLL.PLLSource = RCC_PLLSOURCE_HSE;


	switch(clock_freq)
	{
		case SYSCLK_CONF_FREQ_50MHz:
		{
			osc_inits.PLL.PLLM = 8;
			osc_inits.PLL.PLLN = 100;
			osc_inits.PLL.PLLP = 2;
			osc_inits.PLL.PLLQ = 8;

			clk_inits.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
									RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
			clk_inits.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK; //50MHz
			clk_inits.AHBCLKDivider = RCC_SYSCLK_DIV1; // 50MHz AHB
			clk_inits.APB1CLKDivider = RCC_HCLK_DIV2; // 25MHz APB1
			clk_inits.APB2CLKDivider = RCC_HCLK_DIV2;// 25MHz APB2

			FLatency  = FLASH_LATENCY_1;

			break;
		}
		case SYSCLK_CONF_FREQ_80MHz:
		{
			osc_inits.PLL.PLLM = 8;
			osc_inits.PLL.PLLN = 160;
			osc_inits.PLL.PLLP = 2;
			osc_inits.PLL.PLLQ = 8;

			clk_inits.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
									RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
			clk_inits.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK; //80MHz
			clk_inits.AHBCLKDivider = RCC_SYSCLK_DIV1; // 80MHz AHB
			clk_inits.APB1CLKDivider = RCC_HCLK_DIV2; // 40MHz APB1
			clk_inits.APB2CLKDivider = RCC_HCLK_DIV2;// 40MHz APB2

			FLatency  = FLASH_LATENCY_2;

			break;
		}
		case SYSCLK_CONF_FREQ_100MHz:
		{
			osc_inits.PLL.PLLM = 8;
			osc_inits.PLL.PLLN = 200;
			osc_inits.PLL.PLLP = 2;
			osc_inits.PLL.PLLQ = 8;

			clk_inits.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
									RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
			clk_inits.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK; //100MHz
			clk_inits.AHBCLKDivider = RCC_SYSCLK_DIV1; // 100MHz AHB
			clk_inits.APB1CLKDivider = RCC_HCLK_DIV4; // 25MHz APB1
			clk_inits.APB2CLKDivider = RCC_HCLK_DIV2;// 50MHz APB2

			FLatency = FLASH_LATENCY_3;

			break;
		}
		default:
			return;
	}

	if(HAL_RCC_OscConfig(&osc_inits) != HAL_OK)
	{
		Error_Handler();
	}

	if(HAL_RCC_ClockConfig(&clk_inits, FLatency ) != HAL_OK)
	{
		Error_Handler();
	}

	/*Configure the systick timer interrupt frequency (for every 1 ms) */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

void GPIO_Init(void)
{
    __HAL_RCC_GPIOD_CLK_ENABLE();
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_12;
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
	ledgpio.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOD,&ledgpio);
}

void TIMER10_Init(void)
{
	htimer10.Instance = TIM10;
	htimer10.Init.CounterMode = TIM_COUNTERMODE_UP;
	htimer10.Init.Prescaler = 24;
	htimer10.Init.Period = 64000-1;

	if(HAL_TIM_Base_Init(&htimer10) != HAL_OK)
	{
		Error_Handler();
	}
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
}

void TIMER2_Init(void)
{
	TIM_IC_InitTypeDef timer2IC_config;
	htimer2.Instance = TIM2;
	htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
	htimer2.Init.Period = 0xFFFFFFFF;
	htimer2.Init.Prescaler = 1;

	if(HAL_TIM_IC_Init(&htimer2) != HAL_OK)
	{
		Error_Handler();
	}

	timer2IC_config.ICFilter = 0;
	timer2IC_config.ICPolarity = TIM_ICPOLARITY_RISING;
	timer2IC_config.ICPrescaler = TIM_ICPSC_DIV1;
	timer2IC_config.ICSelection = TIM_ICSELECTION_DIRECTTI;

	if(HAL_TIM_IC_ConfigChannel(&htimer2, &timer2IC_config, TIM_CHANNEL_1) != HAL_OK)
	{
		Error_Handler();
	}
}

void UART2_Init(void)
{
	huart2.Instance = USART2;
	huart2.Init.BaudRate = 115200;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
	if(HAL_UART_Init(&huart2) != HAL_OK)
	{
		Error_Handler();
	}
}

void MCO_Configuration(void)
{
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
}


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
	 if(! is_capture_done)
	 {
		 if(count == 1)
		 {
			 input_capture[0] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
			 count++;
		 }
		 else if (count == 2)
		 {
			 input_capture[1] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
			 count = 1;
			 is_capture_done = TRUE;
		 }
	 }
}


void Error_Handler(void)
{
	while(1);
}

