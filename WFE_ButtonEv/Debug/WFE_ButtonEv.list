
WFE_ButtonEv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001df4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08001f94  08001f94  00011f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ff0  08001ff0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08001ff0  08001ff0  00011ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001ff8  08001ff8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ff8  08001ff8  00011ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ffc  08001ffc  00011ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08002000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000080  08002080  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002080  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000078f4  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001387  00000000  00000000  000279a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000600  00000000  00000000  00028d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00016301  00000000  00000000  00029330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00008264  00000000  00000000  0003f631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008c927  00000000  00000000  00047895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000d41bc  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000570  00000000  00000000  000d4210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001b08  00000000  00000000  000d4780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001f7c 	.word	0x08001f7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08001f7c 	.word	0x08001f7c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <SysTick_Handler>:
 */
#include "main.h"


void SysTick_Handler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000598:	f000 f9a2 	bl	80008e0 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 800059c:	f000 faa2 	bl	8000ae4 <HAL_SYSTICK_IRQHandler>
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80005a8:	2001      	movs	r0, #1
 80005aa:	f000 fc2d 	bl	8000e08 <HAL_GPIO_EXTI_IRQHandler>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <main>:

extern uint8_t somedata[];
UART_HandleTypeDef huart2;

int main()
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08e      	sub	sp, #56	; 0x38
 80005b8:	af00      	add	r7, sp, #0
	HAL_MspInit();
 80005ba:	f000 f8b5 	bl	8000728 <HAL_MspInit>
	GPIO_Init();
 80005be:	f000 f84d 	bl	800065c <GPIO_Init>
	/* Keep unused pins in the analog mode to reduce the power consumption */
	GPIO_Analog_Config();
 80005c2:	f000 f871 	bl	80006a8 <GPIO_Analog_Config>
	UART2_Init();
 80005c6:	f000 f885 	bl	80006d4 <UART2_Init>

	char msg[50];

	while(1)
	{
		if ( HAL_UART_Transmit(&huart2,(uint8_t*)somedata,(uint16_t)strlen((char*)somedata),HAL_MAX_DELAY) != HAL_OK)
 80005ca:	4820      	ldr	r0, [pc, #128]	; (800064c <main+0x98>)
 80005cc:	f7ff fe08 	bl	80001e0 <strlen>
 80005d0:	4603      	mov	r3, r0
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	f04f 33ff 	mov.w	r3, #4294967295
 80005d8:	491c      	ldr	r1, [pc, #112]	; (800064c <main+0x98>)
 80005da:	481d      	ldr	r0, [pc, #116]	; (8000650 <main+0x9c>)
 80005dc:	f000 fcb9 	bl	8000f52 <HAL_UART_Transmit>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <main+0x36>
		{
			Error_Handler();
 80005e6:	f000 f89b 	bl	8000720 <Error_Handler>
		}

		memset(msg,0,sizeof(msg));
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2232      	movs	r2, #50	; 0x32
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 f84d 	bl	8001690 <memset>
		sprintf(msg,"Going to Sleep !\r\n");
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	4916      	ldr	r1, [pc, #88]	; (8000654 <main+0xa0>)
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 f850 	bl	80016a0 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)msg,(uint16_t)strlen((char*)msg),HAL_MAX_DELAY);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff fdec 	bl	80001e0 <strlen>
 8000608:	4603      	mov	r3, r0
 800060a:	b29a      	uxth	r2, r3
 800060c:	1d39      	adds	r1, r7, #4
 800060e:	f04f 33ff 	mov.w	r3, #4294967295
 8000612:	480f      	ldr	r0, [pc, #60]	; (8000650 <main+0x9c>)
 8000614:	f000 fc9d 	bl	8000f52 <HAL_UART_Transmit>

		/* going to sleep here */
		__WFE();
 8000618:	bf20      	wfe
		/* Continues from here when wakes up */

		memset(msg,0,sizeof(msg));
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2232      	movs	r2, #50	; 0x32
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f001 f835 	bl	8001690 <memset>
		sprintf(msg,"Woke up !\r\n");
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	490b      	ldr	r1, [pc, #44]	; (8000658 <main+0xa4>)
 800062a:	4618      	mov	r0, r3
 800062c:	f001 f838 	bl	80016a0 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)msg,(uint16_t)strlen((char*)msg),HAL_MAX_DELAY);
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff fdd4 	bl	80001e0 <strlen>
 8000638:	4603      	mov	r3, r0
 800063a:	b29a      	uxth	r2, r3
 800063c:	1d39      	adds	r1, r7, #4
 800063e:	f04f 33ff 	mov.w	r3, #4294967295
 8000642:	4803      	ldr	r0, [pc, #12]	; (8000650 <main+0x9c>)
 8000644:	f000 fc85 	bl	8000f52 <HAL_UART_Transmit>
		if ( HAL_UART_Transmit(&huart2,(uint8_t*)somedata,(uint16_t)strlen((char*)somedata),HAL_MAX_DELAY) != HAL_OK)
 8000648:	e7bf      	b.n	80005ca <main+0x16>
 800064a:	bf00      	nop
 800064c:	20000000 	.word	0x20000000
 8000650:	2000009c 	.word	0x2000009c
 8000654:	08001f94 	.word	0x08001f94
 8000658:	08001fa8 	.word	0x08001fa8

0800065c <GPIO_Init>:
}



void GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <GPIO_Init+0x44>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <GPIO_Init+0x44>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <GPIO_Init+0x44>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef buttonpin;
	buttonpin.Pin = GPIO_PIN_0;
 800067e:	2301      	movs	r3, #1
 8000680:	607b      	str	r3, [r7, #4]
	buttonpin.Mode = GPIO_MODE_EVT_FALLING;
 8000682:	f44f 1308 	mov.w	r3, #2228224	; 0x220000
 8000686:	60bb      	str	r3, [r7, #8]
	buttonpin.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&buttonpin);
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	4619      	mov	r1, r3
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <GPIO_Init+0x48>)
 8000692:	f000 fa35 	bl	8000b00 <HAL_GPIO_Init>
}
 8000696:	bf00      	nop
 8000698:	3718      	adds	r7, #24
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020000 	.word	0x40020000

080006a8 <GPIO_Analog_Config>:

void GPIO_Analog_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpioA;
	uint32_t gpio_pins = 	GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | \
 80006ae:	f64f 73f2 	movw	r3, #65522	; 0xfff2
 80006b2:	617b      	str	r3, [r7, #20]
							GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
							GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;

	gpioA.Pin = gpio_pins;
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	603b      	str	r3, [r7, #0]
	gpioA.Mode = GPIO_MODE_ANALOG;
 80006b8:	2303      	movs	r3, #3
 80006ba:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &gpioA);
 80006bc:	463b      	mov	r3, r7
 80006be:	4619      	mov	r1, r3
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <GPIO_Analog_Config+0x28>)
 80006c2:	f000 fa1d 	bl	8000b00 <HAL_GPIO_Init>
}
 80006c6:	bf00      	nop
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40020000 	.word	0x40020000

080006d4 <UART2_Init>:

void UART2_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <UART2_Init+0x44>)
 80006da:	4a10      	ldr	r2, [pc, #64]	; (800071c <UART2_Init+0x48>)
 80006dc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 230400; //increase uart baudrate to reduce the power consumption
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <UART2_Init+0x44>)
 80006e0:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80006e4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <UART2_Init+0x44>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <UART2_Init+0x44>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <UART2_Init+0x44>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <UART2_Init+0x44>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <UART2_Init+0x44>)
 8000700:	220c      	movs	r2, #12
 8000702:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&huart2) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <UART2_Init+0x44>)
 8000706:	f000 fbd7 	bl	8000eb8 <HAL_UART_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <UART2_Init+0x40>
	{
		Error_Handler();
 8000710:	f000 f806 	bl	8000720 <Error_Handler>
	}
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000009c 	.word	0x2000009c
 800071c:	40004400 	.word	0x40004400

08000720 <Error_Handler>:




void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
	while(1);
 8000724:	e7fe      	b.n	8000724 <Error_Handler+0x4>
	...

08000728 <HAL_MspInit>:

#include "main.h"


void HAL_MspInit(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	//Low level processor specific inits
	//1. Set up the priority grouping of the arm cortex Mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800072c:	2003      	movs	r0, #3
 800072e:	f000 f9a4 	bl	8000a7a <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the require system exceptions of the arm cortex Mx processor
	//system control block -> System handler control and state register
	SCB->SHCSR |= 0x7 << 16; //usage, bus, memory fault system exceptions
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <HAL_MspInit+0x40>)
 8000734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000736:	4a0c      	ldr	r2, [pc, #48]	; (8000768 <HAL_MspInit+0x40>)
 8000738:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800073c:	6253      	str	r3, [r2, #36]	; 0x24

	//3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	f06f 000b 	mvn.w	r0, #11
 8000746:	f000 f9a3 	bl	8000a90 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	f06f 000a 	mvn.w	r0, #10
 8000752:	f000 f99d 	bl	8000a90 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2100      	movs	r1, #0
 800075a:	f06f 0009 	mvn.w	r0, #9
 800075e:	f000 f997 	bl	8000a90 <HAL_NVIC_SetPriority>
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <HAL_UART_MspInit>:



void HAL_UART_MspInit(UART_HandleTypeDef *huart2)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;

	//Low level inits for UART2 Peripheral
	//1. Enable the clock for the UART2 and GPIO peripheral
	__HAL_RCC_USART2_CLK_ENABLE();
 8000774:	2300      	movs	r3, #0
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	4b1e      	ldr	r3, [pc, #120]	; (80007f4 <HAL_UART_MspInit+0x88>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	4a1d      	ldr	r2, [pc, #116]	; (80007f4 <HAL_UART_MspInit+0x88>)
 800077e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000782:	6413      	str	r3, [r2, #64]	; 0x40
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <HAL_UART_MspInit+0x88>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <HAL_UART_MspInit+0x88>)
 8000796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000798:	4a16      	ldr	r2, [pc, #88]	; (80007f4 <HAL_UART_MspInit+0x88>)
 800079a:	f043 0301 	orr.w	r3, r3, #1
 800079e:	6313      	str	r3, [r2, #48]	; 0x30
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <HAL_UART_MspInit+0x88>)
 80007a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a4:	f003 0301 	and.w	r3, r3, #1
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]
	//2. The pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2; //UART2_TX
 80007ac:	2304      	movs	r3, #4
 80007ae:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 80007b0:	2302      	movs	r3, #2
 80007b2:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FAST;
 80007b8:	2302      	movs	r3, #2
 80007ba:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;
 80007bc:	2307      	movs	r3, #7
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	480c      	ldr	r0, [pc, #48]	; (80007f8 <HAL_UART_MspInit+0x8c>)
 80007c8:	f000 f99a 	bl	8000b00 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 80007cc:	2308      	movs	r3, #8
 80007ce:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	4808      	ldr	r0, [pc, #32]	; (80007f8 <HAL_UART_MspInit+0x8c>)
 80007d8:	f000 f992 	bl	8000b00 <HAL_GPIO_Init>
	//3. Enable the IRQ and set up the priority (NVIC Settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007dc:	2026      	movs	r0, #38	; 0x26
 80007de:	f000 f973 	bl	8000ac8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	210f      	movs	r1, #15
 80007e6:	2026      	movs	r0, #38	; 0x26
 80007e8:	f000 f952 	bl	8000a90 <HAL_NVIC_SetPriority>
}
 80007ec:	bf00      	nop
 80007ee:	3728      	adds	r7, #40	; 0x28
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020000 	.word	0x40020000

080007fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000804:	4a14      	ldr	r2, [pc, #80]	; (8000858 <_sbrk+0x5c>)
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <_sbrk+0x60>)
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <_sbrk+0x64>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d102      	bne.n	800081e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <_sbrk+0x64>)
 800081a:	4a12      	ldr	r2, [pc, #72]	; (8000864 <_sbrk+0x68>)
 800081c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <_sbrk+0x64>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4413      	add	r3, r2
 8000826:	693a      	ldr	r2, [r7, #16]
 8000828:	429a      	cmp	r2, r3
 800082a:	d207      	bcs.n	800083c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800082c:	f000 ff06 	bl	800163c <__errno>
 8000830:	4603      	mov	r3, r0
 8000832:	220c      	movs	r2, #12
 8000834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000836:	f04f 33ff 	mov.w	r3, #4294967295
 800083a:	e009      	b.n	8000850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <_sbrk+0x64>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000842:	4b07      	ldr	r3, [pc, #28]	; (8000860 <_sbrk+0x64>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4413      	add	r3, r2
 800084a:	4a05      	ldr	r2, [pc, #20]	; (8000860 <_sbrk+0x64>)
 800084c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800084e:	68fb      	ldr	r3, [r7, #12]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3718      	adds	r7, #24
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20020000 	.word	0x20020000
 800085c:	00000400 	.word	0x00000400
 8000860:	200000e0 	.word	0x200000e0
 8000864:	200000f8 	.word	0x200000f8

08000868 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <SystemInit+0x20>)
 800086e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000872:	4a05      	ldr	r2, [pc, #20]	; (8000888 <SystemInit+0x20>)
 8000874:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000878:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800088c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000890:	480d      	ldr	r0, [pc, #52]	; (80008c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000892:	490e      	ldr	r1, [pc, #56]	; (80008cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000894:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000898:	e002      	b.n	80008a0 <LoopCopyDataInit>

0800089a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800089c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089e:	3304      	adds	r3, #4

080008a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a4:	d3f9      	bcc.n	800089a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a6:	4a0b      	ldr	r2, [pc, #44]	; (80008d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008a8:	4c0b      	ldr	r4, [pc, #44]	; (80008d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ac:	e001      	b.n	80008b2 <LoopFillZerobss>

080008ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b0:	3204      	adds	r2, #4

080008b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b4:	d3fb      	bcc.n	80008ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008b6:	f7ff ffd7 	bl	8000868 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ba:	f000 fec5 	bl	8001648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008be:	f7ff fe79 	bl	80005b4 <main>
  bx  lr    
 80008c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008cc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80008d0:	08002000 	.word	0x08002000
  ldr r2, =_sbss
 80008d4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80008d8:	200000f8 	.word	0x200000f8

080008dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008dc:	e7fe      	b.n	80008dc <ADC_IRQHandler>
	...

080008e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_IncTick+0x20>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_IncTick+0x24>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4413      	add	r3, r2
 80008f0:	4a04      	ldr	r2, [pc, #16]	; (8000904 <HAL_IncTick+0x24>)
 80008f2:	6013      	str	r3, [r2, #0]
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	20000018 	.word	0x20000018
 8000904:	200000e4 	.word	0x200000e4

08000908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return uwTick;
 800090c:	4b03      	ldr	r3, [pc, #12]	; (800091c <HAL_GetTick+0x14>)
 800090e:	681b      	ldr	r3, [r3, #0]
}
 8000910:	4618      	mov	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	200000e4 	.word	0x200000e4

08000920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <__NVIC_SetPriorityGrouping+0x44>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800093c:	4013      	ands	r3, r2
 800093e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800094c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000952:	4a04      	ldr	r2, [pc, #16]	; (8000964 <__NVIC_SetPriorityGrouping+0x44>)
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	60d3      	str	r3, [r2, #12]
}
 8000958:	bf00      	nop
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <__NVIC_GetPriorityGrouping+0x18>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	0a1b      	lsrs	r3, r3, #8
 8000972:	f003 0307 	and.w	r3, r3, #7
}
 8000976:	4618      	mov	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	2b00      	cmp	r3, #0
 8000994:	db0b      	blt.n	80009ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	f003 021f 	and.w	r2, r3, #31
 800099c:	4907      	ldr	r1, [pc, #28]	; (80009bc <__NVIC_EnableIRQ+0x38>)
 800099e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a2:	095b      	lsrs	r3, r3, #5
 80009a4:	2001      	movs	r0, #1
 80009a6:	fa00 f202 	lsl.w	r2, r0, r2
 80009aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000e100 	.word	0xe000e100

080009c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	6039      	str	r1, [r7, #0]
 80009ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	db0a      	blt.n	80009ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	490c      	ldr	r1, [pc, #48]	; (8000a0c <__NVIC_SetPriority+0x4c>)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	0112      	lsls	r2, r2, #4
 80009e0:	b2d2      	uxtb	r2, r2
 80009e2:	440b      	add	r3, r1
 80009e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e8:	e00a      	b.n	8000a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	4908      	ldr	r1, [pc, #32]	; (8000a10 <__NVIC_SetPriority+0x50>)
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	f003 030f 	and.w	r3, r3, #15
 80009f6:	3b04      	subs	r3, #4
 80009f8:	0112      	lsls	r2, r2, #4
 80009fa:	b2d2      	uxtb	r2, r2
 80009fc:	440b      	add	r3, r1
 80009fe:	761a      	strb	r2, [r3, #24]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000e100 	.word	0xe000e100
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b089      	sub	sp, #36	; 0x24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	f1c3 0307 	rsb	r3, r3, #7
 8000a2e:	2b04      	cmp	r3, #4
 8000a30:	bf28      	it	cs
 8000a32:	2304      	movcs	r3, #4
 8000a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	3304      	adds	r3, #4
 8000a3a:	2b06      	cmp	r3, #6
 8000a3c:	d902      	bls.n	8000a44 <NVIC_EncodePriority+0x30>
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	3b03      	subs	r3, #3
 8000a42:	e000      	b.n	8000a46 <NVIC_EncodePriority+0x32>
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a48:	f04f 32ff 	mov.w	r2, #4294967295
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43da      	mvns	r2, r3
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	401a      	ands	r2, r3
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	fa01 f303 	lsl.w	r3, r1, r3
 8000a66:	43d9      	mvns	r1, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6c:	4313      	orrs	r3, r2
         );
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3724      	adds	r7, #36	; 0x24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff ff4c 	bl	8000920 <__NVIC_SetPriorityGrouping>
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aa2:	f7ff ff61 	bl	8000968 <__NVIC_GetPriorityGrouping>
 8000aa6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	68b9      	ldr	r1, [r7, #8]
 8000aac:	6978      	ldr	r0, [r7, #20]
 8000aae:	f7ff ffb1 	bl	8000a14 <NVIC_EncodePriority>
 8000ab2:	4602      	mov	r2, r0
 8000ab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ab8:	4611      	mov	r1, r2
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff ff80 	bl	80009c0 <__NVIC_SetPriority>
}
 8000ac0:	bf00      	nop
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff ff54 	bl	8000984 <__NVIC_EnableIRQ>
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000ae8:	f000 f802 	bl	8000af0 <HAL_SYSTICK_Callback>
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b089      	sub	sp, #36	; 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
 8000b1a:	e159      	b.n	8000dd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	697a      	ldr	r2, [r7, #20]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	f040 8148 	bne.w	8000dca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f003 0303 	and.w	r3, r3, #3
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d005      	beq.n	8000b52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d130      	bne.n	8000bb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	4013      	ands	r3, r2
 8000b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	68da      	ldr	r2, [r3, #12]
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	69ba      	ldr	r2, [r7, #24]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	69ba      	ldr	r2, [r7, #24]
 8000b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b88:	2201      	movs	r2, #1
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	69ba      	ldr	r2, [r7, #24]
 8000b94:	4013      	ands	r3, r2
 8000b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	091b      	lsrs	r3, r3, #4
 8000b9e:	f003 0201 	and.w	r2, r3, #1
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	69ba      	ldr	r2, [r7, #24]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f003 0303 	and.w	r3, r3, #3
 8000bbc:	2b03      	cmp	r3, #3
 8000bbe:	d017      	beq.n	8000bf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	2203      	movs	r2, #3
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	689a      	ldr	r2, [r3, #8]
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 0303 	and.w	r3, r3, #3
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d123      	bne.n	8000c44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	08da      	lsrs	r2, r3, #3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3208      	adds	r2, #8
 8000c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	f003 0307 	and.w	r3, r3, #7
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	220f      	movs	r2, #15
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	691a      	ldr	r2, [r3, #16]
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	08da      	lsrs	r2, r3, #3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3208      	adds	r2, #8
 8000c3e:	69b9      	ldr	r1, [r7, #24]
 8000c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	2203      	movs	r2, #3
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f003 0203 	and.w	r2, r3, #3
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	f000 80a2 	beq.w	8000dca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b57      	ldr	r3, [pc, #348]	; (8000de8 <HAL_GPIO_Init+0x2e8>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	4a56      	ldr	r2, [pc, #344]	; (8000de8 <HAL_GPIO_Init+0x2e8>)
 8000c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c94:	6453      	str	r3, [r2, #68]	; 0x44
 8000c96:	4b54      	ldr	r3, [pc, #336]	; (8000de8 <HAL_GPIO_Init+0x2e8>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ca2:	4a52      	ldr	r2, [pc, #328]	; (8000dec <HAL_GPIO_Init+0x2ec>)
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	089b      	lsrs	r3, r3, #2
 8000ca8:	3302      	adds	r3, #2
 8000caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f003 0303 	and.w	r3, r3, #3
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	220f      	movs	r2, #15
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a49      	ldr	r2, [pc, #292]	; (8000df0 <HAL_GPIO_Init+0x2f0>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d019      	beq.n	8000d02 <HAL_GPIO_Init+0x202>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a48      	ldr	r2, [pc, #288]	; (8000df4 <HAL_GPIO_Init+0x2f4>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d013      	beq.n	8000cfe <HAL_GPIO_Init+0x1fe>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a47      	ldr	r2, [pc, #284]	; (8000df8 <HAL_GPIO_Init+0x2f8>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d00d      	beq.n	8000cfa <HAL_GPIO_Init+0x1fa>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a46      	ldr	r2, [pc, #280]	; (8000dfc <HAL_GPIO_Init+0x2fc>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d007      	beq.n	8000cf6 <HAL_GPIO_Init+0x1f6>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a45      	ldr	r2, [pc, #276]	; (8000e00 <HAL_GPIO_Init+0x300>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d101      	bne.n	8000cf2 <HAL_GPIO_Init+0x1f2>
 8000cee:	2304      	movs	r3, #4
 8000cf0:	e008      	b.n	8000d04 <HAL_GPIO_Init+0x204>
 8000cf2:	2307      	movs	r3, #7
 8000cf4:	e006      	b.n	8000d04 <HAL_GPIO_Init+0x204>
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e004      	b.n	8000d04 <HAL_GPIO_Init+0x204>
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	e002      	b.n	8000d04 <HAL_GPIO_Init+0x204>
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e000      	b.n	8000d04 <HAL_GPIO_Init+0x204>
 8000d02:	2300      	movs	r3, #0
 8000d04:	69fa      	ldr	r2, [r7, #28]
 8000d06:	f002 0203 	and.w	r2, r2, #3
 8000d0a:	0092      	lsls	r2, r2, #2
 8000d0c:	4093      	lsls	r3, r2
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d14:	4935      	ldr	r1, [pc, #212]	; (8000dec <HAL_GPIO_Init+0x2ec>)
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	089b      	lsrs	r3, r3, #2
 8000d1a:	3302      	adds	r3, #2
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d22:	4b38      	ldr	r3, [pc, #224]	; (8000e04 <HAL_GPIO_Init+0x304>)
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d46:	4a2f      	ldr	r2, [pc, #188]	; (8000e04 <HAL_GPIO_Init+0x304>)
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d4c:	4b2d      	ldr	r3, [pc, #180]	; (8000e04 <HAL_GPIO_Init+0x304>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d70:	4a24      	ldr	r2, [pc, #144]	; (8000e04 <HAL_GPIO_Init+0x304>)
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d76:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <HAL_GPIO_Init+0x304>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4013      	ands	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d9a:	4a1a      	ldr	r2, [pc, #104]	; (8000e04 <HAL_GPIO_Init+0x304>)
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000da0:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <HAL_GPIO_Init+0x304>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d003      	beq.n	8000dc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dc4:	4a0f      	ldr	r2, [pc, #60]	; (8000e04 <HAL_GPIO_Init+0x304>)
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	61fb      	str	r3, [r7, #28]
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	2b0f      	cmp	r3, #15
 8000dd4:	f67f aea2 	bls.w	8000b1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3724      	adds	r7, #36	; 0x24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40013800 	.word	0x40013800
 8000df0:	40020000 	.word	0x40020000
 8000df4:	40020400 	.word	0x40020400
 8000df8:	40020800 	.word	0x40020800
 8000dfc:	40020c00 	.word	0x40020c00
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40013c00 	.word	0x40013c00

08000e08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000e12:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e14:	695a      	ldr	r2, [r3, #20]
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d006      	beq.n	8000e2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e20:	88fb      	ldrh	r3, [r7, #6]
 8000e22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e24:	88fb      	ldrh	r3, [r7, #6]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f806 	bl	8000e38 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40013c00 	.word	0x40013c00

08000e38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <HAL_RCC_GetHCLKFreq+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000014 	.word	0x20000014

08000e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000e6c:	f7ff fff0 	bl	8000e50 <HAL_RCC_GetHCLKFreq>
 8000e70:	4602      	mov	r2, r0
 8000e72:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	0a9b      	lsrs	r3, r3, #10
 8000e78:	f003 0307 	and.w	r3, r3, #7
 8000e7c:	4903      	ldr	r1, [pc, #12]	; (8000e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8000e7e:	5ccb      	ldrb	r3, [r1, r3]
 8000e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	08001fb4 	.word	0x08001fb4

08000e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000e94:	f7ff ffdc 	bl	8000e50 <HAL_RCC_GetHCLKFreq>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	0b5b      	lsrs	r3, r3, #13
 8000ea0:	f003 0307 	and.w	r3, r3, #7
 8000ea4:	4903      	ldr	r1, [pc, #12]	; (8000eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000ea6:	5ccb      	ldrb	r3, [r1, r3]
 8000ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	08001fb4 	.word	0x08001fb4

08000eb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e03f      	b.n	8000f4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d106      	bne.n	8000ee4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff fc44 	bl	800076c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2224      	movs	r2, #36	; 0x24
 8000ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	68da      	ldr	r2, [r3, #12]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000efa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f000 f929 	bl	8001154 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	691a      	ldr	r2, [r3, #16]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000f10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	695a      	ldr	r2, [r3, #20]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000f20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	68da      	ldr	r2, [r3, #12]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2220      	movs	r2, #32
 8000f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2220      	movs	r2, #32
 8000f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b08a      	sub	sp, #40	; 0x28
 8000f56:	af02      	add	r7, sp, #8
 8000f58:	60f8      	str	r0, [r7, #12]
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	603b      	str	r3, [r7, #0]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b20      	cmp	r3, #32
 8000f70:	d17c      	bne.n	800106c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d002      	beq.n	8000f7e <HAL_UART_Transmit+0x2c>
 8000f78:	88fb      	ldrh	r3, [r7, #6]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e075      	b.n	800106e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d101      	bne.n	8000f90 <HAL_UART_Transmit+0x3e>
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	e06e      	b.n	800106e <HAL_UART_Transmit+0x11c>
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2201      	movs	r2, #1
 8000f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2221      	movs	r2, #33	; 0x21
 8000fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000fa6:	f7ff fcaf 	bl	8000908 <HAL_GetTick>
 8000faa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	88fa      	ldrh	r2, [r7, #6]
 8000fb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	88fa      	ldrh	r2, [r7, #6]
 8000fb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fc0:	d108      	bne.n	8000fd4 <HAL_UART_Transmit+0x82>
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	691b      	ldr	r3, [r3, #16]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d104      	bne.n	8000fd4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	61bb      	str	r3, [r7, #24]
 8000fd2:	e003      	b.n	8000fdc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8000fe4:	e02a      	b.n	800103c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	2200      	movs	r2, #0
 8000fee:	2180      	movs	r1, #128	; 0x80
 8000ff0:	68f8      	ldr	r0, [r7, #12]
 8000ff2:	f000 f840 	bl	8001076 <UART_WaitOnFlagUntilTimeout>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e036      	b.n	800106e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d10b      	bne.n	800101e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001014:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	3302      	adds	r3, #2
 800101a:	61bb      	str	r3, [r7, #24]
 800101c:	e007      	b.n	800102e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	781a      	ldrb	r2, [r3, #0]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	3301      	adds	r3, #1
 800102c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001032:	b29b      	uxth	r3, r3
 8001034:	3b01      	subs	r3, #1
 8001036:	b29a      	uxth	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001040:	b29b      	uxth	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1cf      	bne.n	8000fe6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	2200      	movs	r2, #0
 800104e:	2140      	movs	r1, #64	; 0x40
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f000 f810 	bl	8001076 <UART_WaitOnFlagUntilTimeout>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e006      	b.n	800106e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2220      	movs	r2, #32
 8001064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	e000      	b.n	800106e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800106c:	2302      	movs	r3, #2
  }
}
 800106e:	4618      	mov	r0, r3
 8001070:	3720      	adds	r7, #32
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b090      	sub	sp, #64	; 0x40
 800107a:	af00      	add	r7, sp, #0
 800107c:	60f8      	str	r0, [r7, #12]
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	4613      	mov	r3, r2
 8001084:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001086:	e050      	b.n	800112a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800108a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108e:	d04c      	beq.n	800112a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001092:	2b00      	cmp	r3, #0
 8001094:	d007      	beq.n	80010a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001096:	f7ff fc37 	bl	8000908 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d241      	bcs.n	800112a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	330c      	adds	r3, #12
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80010ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010b0:	e853 3f00 	ldrex	r3, [r3]
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80010b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80010bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	330c      	adds	r3, #12
 80010c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010c6:	637a      	str	r2, [r7, #52]	; 0x34
 80010c8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80010ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80010cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010ce:	e841 2300 	strex	r3, r2, [r1]
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80010d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1e5      	bne.n	80010a6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	3314      	adds	r3, #20
 80010e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	e853 3f00 	ldrex	r3, [r3]
 80010e8:	613b      	str	r3, [r7, #16]
   return(result);
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	f023 0301 	bic.w	r3, r3, #1
 80010f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	3314      	adds	r3, #20
 80010f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010fa:	623a      	str	r2, [r7, #32]
 80010fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80010fe:	69f9      	ldr	r1, [r7, #28]
 8001100:	6a3a      	ldr	r2, [r7, #32]
 8001102:	e841 2300 	strex	r3, r2, [r1]
 8001106:	61bb      	str	r3, [r7, #24]
   return(result);
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1e5      	bne.n	80010da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2220      	movs	r2, #32
 8001112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2220      	movs	r2, #32
 800111a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e00f      	b.n	800114a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4013      	ands	r3, r2
 8001134:	68ba      	ldr	r2, [r7, #8]
 8001136:	429a      	cmp	r2, r3
 8001138:	bf0c      	ite	eq
 800113a:	2301      	moveq	r3, #1
 800113c:	2300      	movne	r3, #0
 800113e:	b2db      	uxtb	r3, r3
 8001140:	461a      	mov	r2, r3
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	429a      	cmp	r2, r3
 8001146:	d09f      	beq.n	8001088 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3740      	adds	r7, #64	; 0x40
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001158:	b0c0      	sub	sp, #256	; 0x100
 800115a:	af00      	add	r7, sp, #0
 800115c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800116c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001170:	68d9      	ldr	r1, [r3, #12]
 8001172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	ea40 0301 	orr.w	r3, r0, r1
 800117c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800117e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	431a      	orrs	r2, r3
 800118c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	431a      	orrs	r2, r3
 8001194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	4313      	orrs	r3, r2
 800119c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80011a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80011ac:	f021 010c 	bic.w	r1, r1, #12
 80011b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80011ba:	430b      	orrs	r3, r1
 80011bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80011be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80011ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80011ce:	6999      	ldr	r1, [r3, #24]
 80011d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	ea40 0301 	orr.w	r3, r0, r1
 80011da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80011dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	4b8f      	ldr	r3, [pc, #572]	; (8001420 <UART_SetConfig+0x2cc>)
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d005      	beq.n	80011f4 <UART_SetConfig+0xa0>
 80011e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4b8d      	ldr	r3, [pc, #564]	; (8001424 <UART_SetConfig+0x2d0>)
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d104      	bne.n	80011fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80011f4:	f7ff fe4c 	bl	8000e90 <HAL_RCC_GetPCLK2Freq>
 80011f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80011fc:	e003      	b.n	8001206 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80011fe:	f7ff fe33 	bl	8000e68 <HAL_RCC_GetPCLK1Freq>
 8001202:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800120a:	69db      	ldr	r3, [r3, #28]
 800120c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001210:	f040 810c 	bne.w	800142c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001218:	2200      	movs	r2, #0
 800121a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800121e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001222:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001226:	4622      	mov	r2, r4
 8001228:	462b      	mov	r3, r5
 800122a:	1891      	adds	r1, r2, r2
 800122c:	65b9      	str	r1, [r7, #88]	; 0x58
 800122e:	415b      	adcs	r3, r3
 8001230:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001232:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001236:	4621      	mov	r1, r4
 8001238:	eb12 0801 	adds.w	r8, r2, r1
 800123c:	4629      	mov	r1, r5
 800123e:	eb43 0901 	adc.w	r9, r3, r1
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	f04f 0300 	mov.w	r3, #0
 800124a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800124e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001252:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001256:	4690      	mov	r8, r2
 8001258:	4699      	mov	r9, r3
 800125a:	4623      	mov	r3, r4
 800125c:	eb18 0303 	adds.w	r3, r8, r3
 8001260:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001264:	462b      	mov	r3, r5
 8001266:	eb49 0303 	adc.w	r3, r9, r3
 800126a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800126e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800127a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800127e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001282:	460b      	mov	r3, r1
 8001284:	18db      	adds	r3, r3, r3
 8001286:	653b      	str	r3, [r7, #80]	; 0x50
 8001288:	4613      	mov	r3, r2
 800128a:	eb42 0303 	adc.w	r3, r2, r3
 800128e:	657b      	str	r3, [r7, #84]	; 0x54
 8001290:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001294:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001298:	f7fe fffa 	bl	8000290 <__aeabi_uldivmod>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4b61      	ldr	r3, [pc, #388]	; (8001428 <UART_SetConfig+0x2d4>)
 80012a2:	fba3 2302 	umull	r2, r3, r3, r2
 80012a6:	095b      	lsrs	r3, r3, #5
 80012a8:	011c      	lsls	r4, r3, #4
 80012aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80012ae:	2200      	movs	r2, #0
 80012b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80012b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80012b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80012bc:	4642      	mov	r2, r8
 80012be:	464b      	mov	r3, r9
 80012c0:	1891      	adds	r1, r2, r2
 80012c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80012c4:	415b      	adcs	r3, r3
 80012c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80012cc:	4641      	mov	r1, r8
 80012ce:	eb12 0a01 	adds.w	sl, r2, r1
 80012d2:	4649      	mov	r1, r9
 80012d4:	eb43 0b01 	adc.w	fp, r3, r1
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	f04f 0300 	mov.w	r3, #0
 80012e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80012e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80012e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80012ec:	4692      	mov	sl, r2
 80012ee:	469b      	mov	fp, r3
 80012f0:	4643      	mov	r3, r8
 80012f2:	eb1a 0303 	adds.w	r3, sl, r3
 80012f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80012fa:	464b      	mov	r3, r9
 80012fc:	eb4b 0303 	adc.w	r3, fp, r3
 8001300:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001310:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001314:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001318:	460b      	mov	r3, r1
 800131a:	18db      	adds	r3, r3, r3
 800131c:	643b      	str	r3, [r7, #64]	; 0x40
 800131e:	4613      	mov	r3, r2
 8001320:	eb42 0303 	adc.w	r3, r2, r3
 8001324:	647b      	str	r3, [r7, #68]	; 0x44
 8001326:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800132a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800132e:	f7fe ffaf 	bl	8000290 <__aeabi_uldivmod>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4611      	mov	r1, r2
 8001338:	4b3b      	ldr	r3, [pc, #236]	; (8001428 <UART_SetConfig+0x2d4>)
 800133a:	fba3 2301 	umull	r2, r3, r3, r1
 800133e:	095b      	lsrs	r3, r3, #5
 8001340:	2264      	movs	r2, #100	; 0x64
 8001342:	fb02 f303 	mul.w	r3, r2, r3
 8001346:	1acb      	subs	r3, r1, r3
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800134e:	4b36      	ldr	r3, [pc, #216]	; (8001428 <UART_SetConfig+0x2d4>)
 8001350:	fba3 2302 	umull	r2, r3, r3, r2
 8001354:	095b      	lsrs	r3, r3, #5
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800135c:	441c      	add	r4, r3
 800135e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001362:	2200      	movs	r2, #0
 8001364:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001368:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800136c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001370:	4642      	mov	r2, r8
 8001372:	464b      	mov	r3, r9
 8001374:	1891      	adds	r1, r2, r2
 8001376:	63b9      	str	r1, [r7, #56]	; 0x38
 8001378:	415b      	adcs	r3, r3
 800137a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800137c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001380:	4641      	mov	r1, r8
 8001382:	1851      	adds	r1, r2, r1
 8001384:	6339      	str	r1, [r7, #48]	; 0x30
 8001386:	4649      	mov	r1, r9
 8001388:	414b      	adcs	r3, r1
 800138a:	637b      	str	r3, [r7, #52]	; 0x34
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001398:	4659      	mov	r1, fp
 800139a:	00cb      	lsls	r3, r1, #3
 800139c:	4651      	mov	r1, sl
 800139e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80013a2:	4651      	mov	r1, sl
 80013a4:	00ca      	lsls	r2, r1, #3
 80013a6:	4610      	mov	r0, r2
 80013a8:	4619      	mov	r1, r3
 80013aa:	4603      	mov	r3, r0
 80013ac:	4642      	mov	r2, r8
 80013ae:	189b      	adds	r3, r3, r2
 80013b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80013b4:	464b      	mov	r3, r9
 80013b6:	460a      	mov	r2, r1
 80013b8:	eb42 0303 	adc.w	r3, r2, r3
 80013bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80013c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80013cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80013d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80013d4:	460b      	mov	r3, r1
 80013d6:	18db      	adds	r3, r3, r3
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80013da:	4613      	mov	r3, r2
 80013dc:	eb42 0303 	adc.w	r3, r2, r3
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80013e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80013ea:	f7fe ff51 	bl	8000290 <__aeabi_uldivmod>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <UART_SetConfig+0x2d4>)
 80013f4:	fba3 1302 	umull	r1, r3, r3, r2
 80013f8:	095b      	lsrs	r3, r3, #5
 80013fa:	2164      	movs	r1, #100	; 0x64
 80013fc:	fb01 f303 	mul.w	r3, r1, r3
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	3332      	adds	r3, #50	; 0x32
 8001406:	4a08      	ldr	r2, [pc, #32]	; (8001428 <UART_SetConfig+0x2d4>)
 8001408:	fba2 2303 	umull	r2, r3, r2, r3
 800140c:	095b      	lsrs	r3, r3, #5
 800140e:	f003 0207 	and.w	r2, r3, #7
 8001412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4422      	add	r2, r4
 800141a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800141c:	e105      	b.n	800162a <UART_SetConfig+0x4d6>
 800141e:	bf00      	nop
 8001420:	40011000 	.word	0x40011000
 8001424:	40011400 	.word	0x40011400
 8001428:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800142c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001430:	2200      	movs	r2, #0
 8001432:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001436:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800143a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800143e:	4642      	mov	r2, r8
 8001440:	464b      	mov	r3, r9
 8001442:	1891      	adds	r1, r2, r2
 8001444:	6239      	str	r1, [r7, #32]
 8001446:	415b      	adcs	r3, r3
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
 800144a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800144e:	4641      	mov	r1, r8
 8001450:	1854      	adds	r4, r2, r1
 8001452:	4649      	mov	r1, r9
 8001454:	eb43 0501 	adc.w	r5, r3, r1
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	00eb      	lsls	r3, r5, #3
 8001462:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001466:	00e2      	lsls	r2, r4, #3
 8001468:	4614      	mov	r4, r2
 800146a:	461d      	mov	r5, r3
 800146c:	4643      	mov	r3, r8
 800146e:	18e3      	adds	r3, r4, r3
 8001470:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001474:	464b      	mov	r3, r9
 8001476:	eb45 0303 	adc.w	r3, r5, r3
 800147a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800147e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800148a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800149a:	4629      	mov	r1, r5
 800149c:	008b      	lsls	r3, r1, #2
 800149e:	4621      	mov	r1, r4
 80014a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80014a4:	4621      	mov	r1, r4
 80014a6:	008a      	lsls	r2, r1, #2
 80014a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80014ac:	f7fe fef0 	bl	8000290 <__aeabi_uldivmod>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4b60      	ldr	r3, [pc, #384]	; (8001638 <UART_SetConfig+0x4e4>)
 80014b6:	fba3 2302 	umull	r2, r3, r3, r2
 80014ba:	095b      	lsrs	r3, r3, #5
 80014bc:	011c      	lsls	r4, r3, #4
 80014be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80014c2:	2200      	movs	r2, #0
 80014c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80014c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80014cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80014d0:	4642      	mov	r2, r8
 80014d2:	464b      	mov	r3, r9
 80014d4:	1891      	adds	r1, r2, r2
 80014d6:	61b9      	str	r1, [r7, #24]
 80014d8:	415b      	adcs	r3, r3
 80014da:	61fb      	str	r3, [r7, #28]
 80014dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014e0:	4641      	mov	r1, r8
 80014e2:	1851      	adds	r1, r2, r1
 80014e4:	6139      	str	r1, [r7, #16]
 80014e6:	4649      	mov	r1, r9
 80014e8:	414b      	adcs	r3, r1
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	f04f 0300 	mov.w	r3, #0
 80014f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80014f8:	4659      	mov	r1, fp
 80014fa:	00cb      	lsls	r3, r1, #3
 80014fc:	4651      	mov	r1, sl
 80014fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001502:	4651      	mov	r1, sl
 8001504:	00ca      	lsls	r2, r1, #3
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	4603      	mov	r3, r0
 800150c:	4642      	mov	r2, r8
 800150e:	189b      	adds	r3, r3, r2
 8001510:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001514:	464b      	mov	r3, r9
 8001516:	460a      	mov	r2, r1
 8001518:	eb42 0303 	adc.w	r3, r2, r3
 800151c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	67bb      	str	r3, [r7, #120]	; 0x78
 800152a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001538:	4649      	mov	r1, r9
 800153a:	008b      	lsls	r3, r1, #2
 800153c:	4641      	mov	r1, r8
 800153e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001542:	4641      	mov	r1, r8
 8001544:	008a      	lsls	r2, r1, #2
 8001546:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800154a:	f7fe fea1 	bl	8000290 <__aeabi_uldivmod>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4b39      	ldr	r3, [pc, #228]	; (8001638 <UART_SetConfig+0x4e4>)
 8001554:	fba3 1302 	umull	r1, r3, r3, r2
 8001558:	095b      	lsrs	r3, r3, #5
 800155a:	2164      	movs	r1, #100	; 0x64
 800155c:	fb01 f303 	mul.w	r3, r1, r3
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	3332      	adds	r3, #50	; 0x32
 8001566:	4a34      	ldr	r2, [pc, #208]	; (8001638 <UART_SetConfig+0x4e4>)
 8001568:	fba2 2303 	umull	r2, r3, r2, r3
 800156c:	095b      	lsrs	r3, r3, #5
 800156e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001572:	441c      	add	r4, r3
 8001574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001578:	2200      	movs	r2, #0
 800157a:	673b      	str	r3, [r7, #112]	; 0x70
 800157c:	677a      	str	r2, [r7, #116]	; 0x74
 800157e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001582:	4642      	mov	r2, r8
 8001584:	464b      	mov	r3, r9
 8001586:	1891      	adds	r1, r2, r2
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	415b      	adcs	r3, r3
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001592:	4641      	mov	r1, r8
 8001594:	1851      	adds	r1, r2, r1
 8001596:	6039      	str	r1, [r7, #0]
 8001598:	4649      	mov	r1, r9
 800159a:	414b      	adcs	r3, r1
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	f04f 0300 	mov.w	r3, #0
 80015a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80015aa:	4659      	mov	r1, fp
 80015ac:	00cb      	lsls	r3, r1, #3
 80015ae:	4651      	mov	r1, sl
 80015b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015b4:	4651      	mov	r1, sl
 80015b6:	00ca      	lsls	r2, r1, #3
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	4603      	mov	r3, r0
 80015be:	4642      	mov	r2, r8
 80015c0:	189b      	adds	r3, r3, r2
 80015c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80015c4:	464b      	mov	r3, r9
 80015c6:	460a      	mov	r2, r1
 80015c8:	eb42 0303 	adc.w	r3, r2, r3
 80015cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80015ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	663b      	str	r3, [r7, #96]	; 0x60
 80015d8:	667a      	str	r2, [r7, #100]	; 0x64
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	f04f 0300 	mov.w	r3, #0
 80015e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80015e6:	4649      	mov	r1, r9
 80015e8:	008b      	lsls	r3, r1, #2
 80015ea:	4641      	mov	r1, r8
 80015ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015f0:	4641      	mov	r1, r8
 80015f2:	008a      	lsls	r2, r1, #2
 80015f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80015f8:	f7fe fe4a 	bl	8000290 <__aeabi_uldivmod>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <UART_SetConfig+0x4e4>)
 8001602:	fba3 1302 	umull	r1, r3, r3, r2
 8001606:	095b      	lsrs	r3, r3, #5
 8001608:	2164      	movs	r1, #100	; 0x64
 800160a:	fb01 f303 	mul.w	r3, r1, r3
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	011b      	lsls	r3, r3, #4
 8001612:	3332      	adds	r3, #50	; 0x32
 8001614:	4a08      	ldr	r2, [pc, #32]	; (8001638 <UART_SetConfig+0x4e4>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	095b      	lsrs	r3, r3, #5
 800161c:	f003 020f 	and.w	r2, r3, #15
 8001620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4422      	add	r2, r4
 8001628:	609a      	str	r2, [r3, #8]
}
 800162a:	bf00      	nop
 800162c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001630:	46bd      	mov	sp, r7
 8001632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001636:	bf00      	nop
 8001638:	51eb851f 	.word	0x51eb851f

0800163c <__errno>:
 800163c:	4b01      	ldr	r3, [pc, #4]	; (8001644 <__errno+0x8>)
 800163e:	6818      	ldr	r0, [r3, #0]
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	2000001c 	.word	0x2000001c

08001648 <__libc_init_array>:
 8001648:	b570      	push	{r4, r5, r6, lr}
 800164a:	4d0d      	ldr	r5, [pc, #52]	; (8001680 <__libc_init_array+0x38>)
 800164c:	4c0d      	ldr	r4, [pc, #52]	; (8001684 <__libc_init_array+0x3c>)
 800164e:	1b64      	subs	r4, r4, r5
 8001650:	10a4      	asrs	r4, r4, #2
 8001652:	2600      	movs	r6, #0
 8001654:	42a6      	cmp	r6, r4
 8001656:	d109      	bne.n	800166c <__libc_init_array+0x24>
 8001658:	4d0b      	ldr	r5, [pc, #44]	; (8001688 <__libc_init_array+0x40>)
 800165a:	4c0c      	ldr	r4, [pc, #48]	; (800168c <__libc_init_array+0x44>)
 800165c:	f000 fc8e 	bl	8001f7c <_init>
 8001660:	1b64      	subs	r4, r4, r5
 8001662:	10a4      	asrs	r4, r4, #2
 8001664:	2600      	movs	r6, #0
 8001666:	42a6      	cmp	r6, r4
 8001668:	d105      	bne.n	8001676 <__libc_init_array+0x2e>
 800166a:	bd70      	pop	{r4, r5, r6, pc}
 800166c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001670:	4798      	blx	r3
 8001672:	3601      	adds	r6, #1
 8001674:	e7ee      	b.n	8001654 <__libc_init_array+0xc>
 8001676:	f855 3b04 	ldr.w	r3, [r5], #4
 800167a:	4798      	blx	r3
 800167c:	3601      	adds	r6, #1
 800167e:	e7f2      	b.n	8001666 <__libc_init_array+0x1e>
 8001680:	08001ff8 	.word	0x08001ff8
 8001684:	08001ff8 	.word	0x08001ff8
 8001688:	08001ff8 	.word	0x08001ff8
 800168c:	08001ffc 	.word	0x08001ffc

08001690 <memset>:
 8001690:	4402      	add	r2, r0
 8001692:	4603      	mov	r3, r0
 8001694:	4293      	cmp	r3, r2
 8001696:	d100      	bne.n	800169a <memset+0xa>
 8001698:	4770      	bx	lr
 800169a:	f803 1b01 	strb.w	r1, [r3], #1
 800169e:	e7f9      	b.n	8001694 <memset+0x4>

080016a0 <siprintf>:
 80016a0:	b40e      	push	{r1, r2, r3}
 80016a2:	b500      	push	{lr}
 80016a4:	b09c      	sub	sp, #112	; 0x70
 80016a6:	ab1d      	add	r3, sp, #116	; 0x74
 80016a8:	9002      	str	r0, [sp, #8]
 80016aa:	9006      	str	r0, [sp, #24]
 80016ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80016b0:	4809      	ldr	r0, [pc, #36]	; (80016d8 <siprintf+0x38>)
 80016b2:	9107      	str	r1, [sp, #28]
 80016b4:	9104      	str	r1, [sp, #16]
 80016b6:	4909      	ldr	r1, [pc, #36]	; (80016dc <siprintf+0x3c>)
 80016b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80016bc:	9105      	str	r1, [sp, #20]
 80016be:	6800      	ldr	r0, [r0, #0]
 80016c0:	9301      	str	r3, [sp, #4]
 80016c2:	a902      	add	r1, sp, #8
 80016c4:	f000 f868 	bl	8001798 <_svfiprintf_r>
 80016c8:	9b02      	ldr	r3, [sp, #8]
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
 80016ce:	b01c      	add	sp, #112	; 0x70
 80016d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80016d4:	b003      	add	sp, #12
 80016d6:	4770      	bx	lr
 80016d8:	2000001c 	.word	0x2000001c
 80016dc:	ffff0208 	.word	0xffff0208

080016e0 <__ssputs_r>:
 80016e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016e4:	688e      	ldr	r6, [r1, #8]
 80016e6:	429e      	cmp	r6, r3
 80016e8:	4682      	mov	sl, r0
 80016ea:	460c      	mov	r4, r1
 80016ec:	4690      	mov	r8, r2
 80016ee:	461f      	mov	r7, r3
 80016f0:	d838      	bhi.n	8001764 <__ssputs_r+0x84>
 80016f2:	898a      	ldrh	r2, [r1, #12]
 80016f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80016f8:	d032      	beq.n	8001760 <__ssputs_r+0x80>
 80016fa:	6825      	ldr	r5, [r4, #0]
 80016fc:	6909      	ldr	r1, [r1, #16]
 80016fe:	eba5 0901 	sub.w	r9, r5, r1
 8001702:	6965      	ldr	r5, [r4, #20]
 8001704:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001708:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800170c:	3301      	adds	r3, #1
 800170e:	444b      	add	r3, r9
 8001710:	106d      	asrs	r5, r5, #1
 8001712:	429d      	cmp	r5, r3
 8001714:	bf38      	it	cc
 8001716:	461d      	movcc	r5, r3
 8001718:	0553      	lsls	r3, r2, #21
 800171a:	d531      	bpl.n	8001780 <__ssputs_r+0xa0>
 800171c:	4629      	mov	r1, r5
 800171e:	f000 fb63 	bl	8001de8 <_malloc_r>
 8001722:	4606      	mov	r6, r0
 8001724:	b950      	cbnz	r0, 800173c <__ssputs_r+0x5c>
 8001726:	230c      	movs	r3, #12
 8001728:	f8ca 3000 	str.w	r3, [sl]
 800172c:	89a3      	ldrh	r3, [r4, #12]
 800172e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001732:	81a3      	strh	r3, [r4, #12]
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800173c:	6921      	ldr	r1, [r4, #16]
 800173e:	464a      	mov	r2, r9
 8001740:	f000 fabe 	bl	8001cc0 <memcpy>
 8001744:	89a3      	ldrh	r3, [r4, #12]
 8001746:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800174a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800174e:	81a3      	strh	r3, [r4, #12]
 8001750:	6126      	str	r6, [r4, #16]
 8001752:	6165      	str	r5, [r4, #20]
 8001754:	444e      	add	r6, r9
 8001756:	eba5 0509 	sub.w	r5, r5, r9
 800175a:	6026      	str	r6, [r4, #0]
 800175c:	60a5      	str	r5, [r4, #8]
 800175e:	463e      	mov	r6, r7
 8001760:	42be      	cmp	r6, r7
 8001762:	d900      	bls.n	8001766 <__ssputs_r+0x86>
 8001764:	463e      	mov	r6, r7
 8001766:	6820      	ldr	r0, [r4, #0]
 8001768:	4632      	mov	r2, r6
 800176a:	4641      	mov	r1, r8
 800176c:	f000 fab6 	bl	8001cdc <memmove>
 8001770:	68a3      	ldr	r3, [r4, #8]
 8001772:	1b9b      	subs	r3, r3, r6
 8001774:	60a3      	str	r3, [r4, #8]
 8001776:	6823      	ldr	r3, [r4, #0]
 8001778:	4433      	add	r3, r6
 800177a:	6023      	str	r3, [r4, #0]
 800177c:	2000      	movs	r0, #0
 800177e:	e7db      	b.n	8001738 <__ssputs_r+0x58>
 8001780:	462a      	mov	r2, r5
 8001782:	f000 fba5 	bl	8001ed0 <_realloc_r>
 8001786:	4606      	mov	r6, r0
 8001788:	2800      	cmp	r0, #0
 800178a:	d1e1      	bne.n	8001750 <__ssputs_r+0x70>
 800178c:	6921      	ldr	r1, [r4, #16]
 800178e:	4650      	mov	r0, sl
 8001790:	f000 fabe 	bl	8001d10 <_free_r>
 8001794:	e7c7      	b.n	8001726 <__ssputs_r+0x46>
	...

08001798 <_svfiprintf_r>:
 8001798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800179c:	4698      	mov	r8, r3
 800179e:	898b      	ldrh	r3, [r1, #12]
 80017a0:	061b      	lsls	r3, r3, #24
 80017a2:	b09d      	sub	sp, #116	; 0x74
 80017a4:	4607      	mov	r7, r0
 80017a6:	460d      	mov	r5, r1
 80017a8:	4614      	mov	r4, r2
 80017aa:	d50e      	bpl.n	80017ca <_svfiprintf_r+0x32>
 80017ac:	690b      	ldr	r3, [r1, #16]
 80017ae:	b963      	cbnz	r3, 80017ca <_svfiprintf_r+0x32>
 80017b0:	2140      	movs	r1, #64	; 0x40
 80017b2:	f000 fb19 	bl	8001de8 <_malloc_r>
 80017b6:	6028      	str	r0, [r5, #0]
 80017b8:	6128      	str	r0, [r5, #16]
 80017ba:	b920      	cbnz	r0, 80017c6 <_svfiprintf_r+0x2e>
 80017bc:	230c      	movs	r3, #12
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295
 80017c4:	e0d1      	b.n	800196a <_svfiprintf_r+0x1d2>
 80017c6:	2340      	movs	r3, #64	; 0x40
 80017c8:	616b      	str	r3, [r5, #20]
 80017ca:	2300      	movs	r3, #0
 80017cc:	9309      	str	r3, [sp, #36]	; 0x24
 80017ce:	2320      	movs	r3, #32
 80017d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80017d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80017d8:	2330      	movs	r3, #48	; 0x30
 80017da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001984 <_svfiprintf_r+0x1ec>
 80017de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80017e2:	f04f 0901 	mov.w	r9, #1
 80017e6:	4623      	mov	r3, r4
 80017e8:	469a      	mov	sl, r3
 80017ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80017ee:	b10a      	cbz	r2, 80017f4 <_svfiprintf_r+0x5c>
 80017f0:	2a25      	cmp	r2, #37	; 0x25
 80017f2:	d1f9      	bne.n	80017e8 <_svfiprintf_r+0x50>
 80017f4:	ebba 0b04 	subs.w	fp, sl, r4
 80017f8:	d00b      	beq.n	8001812 <_svfiprintf_r+0x7a>
 80017fa:	465b      	mov	r3, fp
 80017fc:	4622      	mov	r2, r4
 80017fe:	4629      	mov	r1, r5
 8001800:	4638      	mov	r0, r7
 8001802:	f7ff ff6d 	bl	80016e0 <__ssputs_r>
 8001806:	3001      	adds	r0, #1
 8001808:	f000 80aa 	beq.w	8001960 <_svfiprintf_r+0x1c8>
 800180c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800180e:	445a      	add	r2, fp
 8001810:	9209      	str	r2, [sp, #36]	; 0x24
 8001812:	f89a 3000 	ldrb.w	r3, [sl]
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 80a2 	beq.w	8001960 <_svfiprintf_r+0x1c8>
 800181c:	2300      	movs	r3, #0
 800181e:	f04f 32ff 	mov.w	r2, #4294967295
 8001822:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001826:	f10a 0a01 	add.w	sl, sl, #1
 800182a:	9304      	str	r3, [sp, #16]
 800182c:	9307      	str	r3, [sp, #28]
 800182e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001832:	931a      	str	r3, [sp, #104]	; 0x68
 8001834:	4654      	mov	r4, sl
 8001836:	2205      	movs	r2, #5
 8001838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800183c:	4851      	ldr	r0, [pc, #324]	; (8001984 <_svfiprintf_r+0x1ec>)
 800183e:	f7fe fcd7 	bl	80001f0 <memchr>
 8001842:	9a04      	ldr	r2, [sp, #16]
 8001844:	b9d8      	cbnz	r0, 800187e <_svfiprintf_r+0xe6>
 8001846:	06d0      	lsls	r0, r2, #27
 8001848:	bf44      	itt	mi
 800184a:	2320      	movmi	r3, #32
 800184c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001850:	0711      	lsls	r1, r2, #28
 8001852:	bf44      	itt	mi
 8001854:	232b      	movmi	r3, #43	; 0x2b
 8001856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800185a:	f89a 3000 	ldrb.w	r3, [sl]
 800185e:	2b2a      	cmp	r3, #42	; 0x2a
 8001860:	d015      	beq.n	800188e <_svfiprintf_r+0xf6>
 8001862:	9a07      	ldr	r2, [sp, #28]
 8001864:	4654      	mov	r4, sl
 8001866:	2000      	movs	r0, #0
 8001868:	f04f 0c0a 	mov.w	ip, #10
 800186c:	4621      	mov	r1, r4
 800186e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001872:	3b30      	subs	r3, #48	; 0x30
 8001874:	2b09      	cmp	r3, #9
 8001876:	d94e      	bls.n	8001916 <_svfiprintf_r+0x17e>
 8001878:	b1b0      	cbz	r0, 80018a8 <_svfiprintf_r+0x110>
 800187a:	9207      	str	r2, [sp, #28]
 800187c:	e014      	b.n	80018a8 <_svfiprintf_r+0x110>
 800187e:	eba0 0308 	sub.w	r3, r0, r8
 8001882:	fa09 f303 	lsl.w	r3, r9, r3
 8001886:	4313      	orrs	r3, r2
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	46a2      	mov	sl, r4
 800188c:	e7d2      	b.n	8001834 <_svfiprintf_r+0x9c>
 800188e:	9b03      	ldr	r3, [sp, #12]
 8001890:	1d19      	adds	r1, r3, #4
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	9103      	str	r1, [sp, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	bfbb      	ittet	lt
 800189a:	425b      	neglt	r3, r3
 800189c:	f042 0202 	orrlt.w	r2, r2, #2
 80018a0:	9307      	strge	r3, [sp, #28]
 80018a2:	9307      	strlt	r3, [sp, #28]
 80018a4:	bfb8      	it	lt
 80018a6:	9204      	strlt	r2, [sp, #16]
 80018a8:	7823      	ldrb	r3, [r4, #0]
 80018aa:	2b2e      	cmp	r3, #46	; 0x2e
 80018ac:	d10c      	bne.n	80018c8 <_svfiprintf_r+0x130>
 80018ae:	7863      	ldrb	r3, [r4, #1]
 80018b0:	2b2a      	cmp	r3, #42	; 0x2a
 80018b2:	d135      	bne.n	8001920 <_svfiprintf_r+0x188>
 80018b4:	9b03      	ldr	r3, [sp, #12]
 80018b6:	1d1a      	adds	r2, r3, #4
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	9203      	str	r2, [sp, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	bfb8      	it	lt
 80018c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80018c4:	3402      	adds	r4, #2
 80018c6:	9305      	str	r3, [sp, #20]
 80018c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001994 <_svfiprintf_r+0x1fc>
 80018cc:	7821      	ldrb	r1, [r4, #0]
 80018ce:	2203      	movs	r2, #3
 80018d0:	4650      	mov	r0, sl
 80018d2:	f7fe fc8d 	bl	80001f0 <memchr>
 80018d6:	b140      	cbz	r0, 80018ea <_svfiprintf_r+0x152>
 80018d8:	2340      	movs	r3, #64	; 0x40
 80018da:	eba0 000a 	sub.w	r0, r0, sl
 80018de:	fa03 f000 	lsl.w	r0, r3, r0
 80018e2:	9b04      	ldr	r3, [sp, #16]
 80018e4:	4303      	orrs	r3, r0
 80018e6:	3401      	adds	r4, #1
 80018e8:	9304      	str	r3, [sp, #16]
 80018ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018ee:	4826      	ldr	r0, [pc, #152]	; (8001988 <_svfiprintf_r+0x1f0>)
 80018f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80018f4:	2206      	movs	r2, #6
 80018f6:	f7fe fc7b 	bl	80001f0 <memchr>
 80018fa:	2800      	cmp	r0, #0
 80018fc:	d038      	beq.n	8001970 <_svfiprintf_r+0x1d8>
 80018fe:	4b23      	ldr	r3, [pc, #140]	; (800198c <_svfiprintf_r+0x1f4>)
 8001900:	bb1b      	cbnz	r3, 800194a <_svfiprintf_r+0x1b2>
 8001902:	9b03      	ldr	r3, [sp, #12]
 8001904:	3307      	adds	r3, #7
 8001906:	f023 0307 	bic.w	r3, r3, #7
 800190a:	3308      	adds	r3, #8
 800190c:	9303      	str	r3, [sp, #12]
 800190e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001910:	4433      	add	r3, r6
 8001912:	9309      	str	r3, [sp, #36]	; 0x24
 8001914:	e767      	b.n	80017e6 <_svfiprintf_r+0x4e>
 8001916:	fb0c 3202 	mla	r2, ip, r2, r3
 800191a:	460c      	mov	r4, r1
 800191c:	2001      	movs	r0, #1
 800191e:	e7a5      	b.n	800186c <_svfiprintf_r+0xd4>
 8001920:	2300      	movs	r3, #0
 8001922:	3401      	adds	r4, #1
 8001924:	9305      	str	r3, [sp, #20]
 8001926:	4619      	mov	r1, r3
 8001928:	f04f 0c0a 	mov.w	ip, #10
 800192c:	4620      	mov	r0, r4
 800192e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001932:	3a30      	subs	r2, #48	; 0x30
 8001934:	2a09      	cmp	r2, #9
 8001936:	d903      	bls.n	8001940 <_svfiprintf_r+0x1a8>
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0c5      	beq.n	80018c8 <_svfiprintf_r+0x130>
 800193c:	9105      	str	r1, [sp, #20]
 800193e:	e7c3      	b.n	80018c8 <_svfiprintf_r+0x130>
 8001940:	fb0c 2101 	mla	r1, ip, r1, r2
 8001944:	4604      	mov	r4, r0
 8001946:	2301      	movs	r3, #1
 8001948:	e7f0      	b.n	800192c <_svfiprintf_r+0x194>
 800194a:	ab03      	add	r3, sp, #12
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	462a      	mov	r2, r5
 8001950:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <_svfiprintf_r+0x1f8>)
 8001952:	a904      	add	r1, sp, #16
 8001954:	4638      	mov	r0, r7
 8001956:	f3af 8000 	nop.w
 800195a:	1c42      	adds	r2, r0, #1
 800195c:	4606      	mov	r6, r0
 800195e:	d1d6      	bne.n	800190e <_svfiprintf_r+0x176>
 8001960:	89ab      	ldrh	r3, [r5, #12]
 8001962:	065b      	lsls	r3, r3, #25
 8001964:	f53f af2c 	bmi.w	80017c0 <_svfiprintf_r+0x28>
 8001968:	9809      	ldr	r0, [sp, #36]	; 0x24
 800196a:	b01d      	add	sp, #116	; 0x74
 800196c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001970:	ab03      	add	r3, sp, #12
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	462a      	mov	r2, r5
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <_svfiprintf_r+0x1f8>)
 8001978:	a904      	add	r1, sp, #16
 800197a:	4638      	mov	r0, r7
 800197c:	f000 f87a 	bl	8001a74 <_printf_i>
 8001980:	e7eb      	b.n	800195a <_svfiprintf_r+0x1c2>
 8001982:	bf00      	nop
 8001984:	08001fbc 	.word	0x08001fbc
 8001988:	08001fc6 	.word	0x08001fc6
 800198c:	00000000 	.word	0x00000000
 8001990:	080016e1 	.word	0x080016e1
 8001994:	08001fc2 	.word	0x08001fc2

08001998 <_printf_common>:
 8001998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800199c:	4616      	mov	r6, r2
 800199e:	4699      	mov	r9, r3
 80019a0:	688a      	ldr	r2, [r1, #8]
 80019a2:	690b      	ldr	r3, [r1, #16]
 80019a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80019a8:	4293      	cmp	r3, r2
 80019aa:	bfb8      	it	lt
 80019ac:	4613      	movlt	r3, r2
 80019ae:	6033      	str	r3, [r6, #0]
 80019b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80019b4:	4607      	mov	r7, r0
 80019b6:	460c      	mov	r4, r1
 80019b8:	b10a      	cbz	r2, 80019be <_printf_common+0x26>
 80019ba:	3301      	adds	r3, #1
 80019bc:	6033      	str	r3, [r6, #0]
 80019be:	6823      	ldr	r3, [r4, #0]
 80019c0:	0699      	lsls	r1, r3, #26
 80019c2:	bf42      	ittt	mi
 80019c4:	6833      	ldrmi	r3, [r6, #0]
 80019c6:	3302      	addmi	r3, #2
 80019c8:	6033      	strmi	r3, [r6, #0]
 80019ca:	6825      	ldr	r5, [r4, #0]
 80019cc:	f015 0506 	ands.w	r5, r5, #6
 80019d0:	d106      	bne.n	80019e0 <_printf_common+0x48>
 80019d2:	f104 0a19 	add.w	sl, r4, #25
 80019d6:	68e3      	ldr	r3, [r4, #12]
 80019d8:	6832      	ldr	r2, [r6, #0]
 80019da:	1a9b      	subs	r3, r3, r2
 80019dc:	42ab      	cmp	r3, r5
 80019de:	dc26      	bgt.n	8001a2e <_printf_common+0x96>
 80019e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80019e4:	1e13      	subs	r3, r2, #0
 80019e6:	6822      	ldr	r2, [r4, #0]
 80019e8:	bf18      	it	ne
 80019ea:	2301      	movne	r3, #1
 80019ec:	0692      	lsls	r2, r2, #26
 80019ee:	d42b      	bmi.n	8001a48 <_printf_common+0xb0>
 80019f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80019f4:	4649      	mov	r1, r9
 80019f6:	4638      	mov	r0, r7
 80019f8:	47c0      	blx	r8
 80019fa:	3001      	adds	r0, #1
 80019fc:	d01e      	beq.n	8001a3c <_printf_common+0xa4>
 80019fe:	6823      	ldr	r3, [r4, #0]
 8001a00:	68e5      	ldr	r5, [r4, #12]
 8001a02:	6832      	ldr	r2, [r6, #0]
 8001a04:	f003 0306 	and.w	r3, r3, #6
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	bf08      	it	eq
 8001a0c:	1aad      	subeq	r5, r5, r2
 8001a0e:	68a3      	ldr	r3, [r4, #8]
 8001a10:	6922      	ldr	r2, [r4, #16]
 8001a12:	bf0c      	ite	eq
 8001a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001a18:	2500      	movne	r5, #0
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	bfc4      	itt	gt
 8001a1e:	1a9b      	subgt	r3, r3, r2
 8001a20:	18ed      	addgt	r5, r5, r3
 8001a22:	2600      	movs	r6, #0
 8001a24:	341a      	adds	r4, #26
 8001a26:	42b5      	cmp	r5, r6
 8001a28:	d11a      	bne.n	8001a60 <_printf_common+0xc8>
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	e008      	b.n	8001a40 <_printf_common+0xa8>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	4652      	mov	r2, sl
 8001a32:	4649      	mov	r1, r9
 8001a34:	4638      	mov	r0, r7
 8001a36:	47c0      	blx	r8
 8001a38:	3001      	adds	r0, #1
 8001a3a:	d103      	bne.n	8001a44 <_printf_common+0xac>
 8001a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a44:	3501      	adds	r5, #1
 8001a46:	e7c6      	b.n	80019d6 <_printf_common+0x3e>
 8001a48:	18e1      	adds	r1, r4, r3
 8001a4a:	1c5a      	adds	r2, r3, #1
 8001a4c:	2030      	movs	r0, #48	; 0x30
 8001a4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001a52:	4422      	add	r2, r4
 8001a54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001a58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001a5c:	3302      	adds	r3, #2
 8001a5e:	e7c7      	b.n	80019f0 <_printf_common+0x58>
 8001a60:	2301      	movs	r3, #1
 8001a62:	4622      	mov	r2, r4
 8001a64:	4649      	mov	r1, r9
 8001a66:	4638      	mov	r0, r7
 8001a68:	47c0      	blx	r8
 8001a6a:	3001      	adds	r0, #1
 8001a6c:	d0e6      	beq.n	8001a3c <_printf_common+0xa4>
 8001a6e:	3601      	adds	r6, #1
 8001a70:	e7d9      	b.n	8001a26 <_printf_common+0x8e>
	...

08001a74 <_printf_i>:
 8001a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a78:	7e0f      	ldrb	r7, [r1, #24]
 8001a7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001a7c:	2f78      	cmp	r7, #120	; 0x78
 8001a7e:	4691      	mov	r9, r2
 8001a80:	4680      	mov	r8, r0
 8001a82:	460c      	mov	r4, r1
 8001a84:	469a      	mov	sl, r3
 8001a86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001a8a:	d807      	bhi.n	8001a9c <_printf_i+0x28>
 8001a8c:	2f62      	cmp	r7, #98	; 0x62
 8001a8e:	d80a      	bhi.n	8001aa6 <_printf_i+0x32>
 8001a90:	2f00      	cmp	r7, #0
 8001a92:	f000 80d8 	beq.w	8001c46 <_printf_i+0x1d2>
 8001a96:	2f58      	cmp	r7, #88	; 0x58
 8001a98:	f000 80a3 	beq.w	8001be2 <_printf_i+0x16e>
 8001a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001aa4:	e03a      	b.n	8001b1c <_printf_i+0xa8>
 8001aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001aaa:	2b15      	cmp	r3, #21
 8001aac:	d8f6      	bhi.n	8001a9c <_printf_i+0x28>
 8001aae:	a101      	add	r1, pc, #4	; (adr r1, 8001ab4 <_printf_i+0x40>)
 8001ab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001ab4:	08001b0d 	.word	0x08001b0d
 8001ab8:	08001b21 	.word	0x08001b21
 8001abc:	08001a9d 	.word	0x08001a9d
 8001ac0:	08001a9d 	.word	0x08001a9d
 8001ac4:	08001a9d 	.word	0x08001a9d
 8001ac8:	08001a9d 	.word	0x08001a9d
 8001acc:	08001b21 	.word	0x08001b21
 8001ad0:	08001a9d 	.word	0x08001a9d
 8001ad4:	08001a9d 	.word	0x08001a9d
 8001ad8:	08001a9d 	.word	0x08001a9d
 8001adc:	08001a9d 	.word	0x08001a9d
 8001ae0:	08001c2d 	.word	0x08001c2d
 8001ae4:	08001b51 	.word	0x08001b51
 8001ae8:	08001c0f 	.word	0x08001c0f
 8001aec:	08001a9d 	.word	0x08001a9d
 8001af0:	08001a9d 	.word	0x08001a9d
 8001af4:	08001c4f 	.word	0x08001c4f
 8001af8:	08001a9d 	.word	0x08001a9d
 8001afc:	08001b51 	.word	0x08001b51
 8001b00:	08001a9d 	.word	0x08001a9d
 8001b04:	08001a9d 	.word	0x08001a9d
 8001b08:	08001c17 	.word	0x08001c17
 8001b0c:	682b      	ldr	r3, [r5, #0]
 8001b0e:	1d1a      	adds	r2, r3, #4
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	602a      	str	r2, [r5, #0]
 8001b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0a3      	b.n	8001c68 <_printf_i+0x1f4>
 8001b20:	6820      	ldr	r0, [r4, #0]
 8001b22:	6829      	ldr	r1, [r5, #0]
 8001b24:	0606      	lsls	r6, r0, #24
 8001b26:	f101 0304 	add.w	r3, r1, #4
 8001b2a:	d50a      	bpl.n	8001b42 <_printf_i+0xce>
 8001b2c:	680e      	ldr	r6, [r1, #0]
 8001b2e:	602b      	str	r3, [r5, #0]
 8001b30:	2e00      	cmp	r6, #0
 8001b32:	da03      	bge.n	8001b3c <_printf_i+0xc8>
 8001b34:	232d      	movs	r3, #45	; 0x2d
 8001b36:	4276      	negs	r6, r6
 8001b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b3c:	485e      	ldr	r0, [pc, #376]	; (8001cb8 <_printf_i+0x244>)
 8001b3e:	230a      	movs	r3, #10
 8001b40:	e019      	b.n	8001b76 <_printf_i+0x102>
 8001b42:	680e      	ldr	r6, [r1, #0]
 8001b44:	602b      	str	r3, [r5, #0]
 8001b46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001b4a:	bf18      	it	ne
 8001b4c:	b236      	sxthne	r6, r6
 8001b4e:	e7ef      	b.n	8001b30 <_printf_i+0xbc>
 8001b50:	682b      	ldr	r3, [r5, #0]
 8001b52:	6820      	ldr	r0, [r4, #0]
 8001b54:	1d19      	adds	r1, r3, #4
 8001b56:	6029      	str	r1, [r5, #0]
 8001b58:	0601      	lsls	r1, r0, #24
 8001b5a:	d501      	bpl.n	8001b60 <_printf_i+0xec>
 8001b5c:	681e      	ldr	r6, [r3, #0]
 8001b5e:	e002      	b.n	8001b66 <_printf_i+0xf2>
 8001b60:	0646      	lsls	r6, r0, #25
 8001b62:	d5fb      	bpl.n	8001b5c <_printf_i+0xe8>
 8001b64:	881e      	ldrh	r6, [r3, #0]
 8001b66:	4854      	ldr	r0, [pc, #336]	; (8001cb8 <_printf_i+0x244>)
 8001b68:	2f6f      	cmp	r7, #111	; 0x6f
 8001b6a:	bf0c      	ite	eq
 8001b6c:	2308      	moveq	r3, #8
 8001b6e:	230a      	movne	r3, #10
 8001b70:	2100      	movs	r1, #0
 8001b72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001b76:	6865      	ldr	r5, [r4, #4]
 8001b78:	60a5      	str	r5, [r4, #8]
 8001b7a:	2d00      	cmp	r5, #0
 8001b7c:	bfa2      	ittt	ge
 8001b7e:	6821      	ldrge	r1, [r4, #0]
 8001b80:	f021 0104 	bicge.w	r1, r1, #4
 8001b84:	6021      	strge	r1, [r4, #0]
 8001b86:	b90e      	cbnz	r6, 8001b8c <_printf_i+0x118>
 8001b88:	2d00      	cmp	r5, #0
 8001b8a:	d04d      	beq.n	8001c28 <_printf_i+0x1b4>
 8001b8c:	4615      	mov	r5, r2
 8001b8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8001b92:	fb03 6711 	mls	r7, r3, r1, r6
 8001b96:	5dc7      	ldrb	r7, [r0, r7]
 8001b98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001b9c:	4637      	mov	r7, r6
 8001b9e:	42bb      	cmp	r3, r7
 8001ba0:	460e      	mov	r6, r1
 8001ba2:	d9f4      	bls.n	8001b8e <_printf_i+0x11a>
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d10b      	bne.n	8001bc0 <_printf_i+0x14c>
 8001ba8:	6823      	ldr	r3, [r4, #0]
 8001baa:	07de      	lsls	r6, r3, #31
 8001bac:	d508      	bpl.n	8001bc0 <_printf_i+0x14c>
 8001bae:	6923      	ldr	r3, [r4, #16]
 8001bb0:	6861      	ldr	r1, [r4, #4]
 8001bb2:	4299      	cmp	r1, r3
 8001bb4:	bfde      	ittt	le
 8001bb6:	2330      	movle	r3, #48	; 0x30
 8001bb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001bbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001bc0:	1b52      	subs	r2, r2, r5
 8001bc2:	6122      	str	r2, [r4, #16]
 8001bc4:	f8cd a000 	str.w	sl, [sp]
 8001bc8:	464b      	mov	r3, r9
 8001bca:	aa03      	add	r2, sp, #12
 8001bcc:	4621      	mov	r1, r4
 8001bce:	4640      	mov	r0, r8
 8001bd0:	f7ff fee2 	bl	8001998 <_printf_common>
 8001bd4:	3001      	adds	r0, #1
 8001bd6:	d14c      	bne.n	8001c72 <_printf_i+0x1fe>
 8001bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bdc:	b004      	add	sp, #16
 8001bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001be2:	4835      	ldr	r0, [pc, #212]	; (8001cb8 <_printf_i+0x244>)
 8001be4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001be8:	6829      	ldr	r1, [r5, #0]
 8001bea:	6823      	ldr	r3, [r4, #0]
 8001bec:	f851 6b04 	ldr.w	r6, [r1], #4
 8001bf0:	6029      	str	r1, [r5, #0]
 8001bf2:	061d      	lsls	r5, r3, #24
 8001bf4:	d514      	bpl.n	8001c20 <_printf_i+0x1ac>
 8001bf6:	07df      	lsls	r7, r3, #31
 8001bf8:	bf44      	itt	mi
 8001bfa:	f043 0320 	orrmi.w	r3, r3, #32
 8001bfe:	6023      	strmi	r3, [r4, #0]
 8001c00:	b91e      	cbnz	r6, 8001c0a <_printf_i+0x196>
 8001c02:	6823      	ldr	r3, [r4, #0]
 8001c04:	f023 0320 	bic.w	r3, r3, #32
 8001c08:	6023      	str	r3, [r4, #0]
 8001c0a:	2310      	movs	r3, #16
 8001c0c:	e7b0      	b.n	8001b70 <_printf_i+0xfc>
 8001c0e:	6823      	ldr	r3, [r4, #0]
 8001c10:	f043 0320 	orr.w	r3, r3, #32
 8001c14:	6023      	str	r3, [r4, #0]
 8001c16:	2378      	movs	r3, #120	; 0x78
 8001c18:	4828      	ldr	r0, [pc, #160]	; (8001cbc <_printf_i+0x248>)
 8001c1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001c1e:	e7e3      	b.n	8001be8 <_printf_i+0x174>
 8001c20:	0659      	lsls	r1, r3, #25
 8001c22:	bf48      	it	mi
 8001c24:	b2b6      	uxthmi	r6, r6
 8001c26:	e7e6      	b.n	8001bf6 <_printf_i+0x182>
 8001c28:	4615      	mov	r5, r2
 8001c2a:	e7bb      	b.n	8001ba4 <_printf_i+0x130>
 8001c2c:	682b      	ldr	r3, [r5, #0]
 8001c2e:	6826      	ldr	r6, [r4, #0]
 8001c30:	6961      	ldr	r1, [r4, #20]
 8001c32:	1d18      	adds	r0, r3, #4
 8001c34:	6028      	str	r0, [r5, #0]
 8001c36:	0635      	lsls	r5, r6, #24
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	d501      	bpl.n	8001c40 <_printf_i+0x1cc>
 8001c3c:	6019      	str	r1, [r3, #0]
 8001c3e:	e002      	b.n	8001c46 <_printf_i+0x1d2>
 8001c40:	0670      	lsls	r0, r6, #25
 8001c42:	d5fb      	bpl.n	8001c3c <_printf_i+0x1c8>
 8001c44:	8019      	strh	r1, [r3, #0]
 8001c46:	2300      	movs	r3, #0
 8001c48:	6123      	str	r3, [r4, #16]
 8001c4a:	4615      	mov	r5, r2
 8001c4c:	e7ba      	b.n	8001bc4 <_printf_i+0x150>
 8001c4e:	682b      	ldr	r3, [r5, #0]
 8001c50:	1d1a      	adds	r2, r3, #4
 8001c52:	602a      	str	r2, [r5, #0]
 8001c54:	681d      	ldr	r5, [r3, #0]
 8001c56:	6862      	ldr	r2, [r4, #4]
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4628      	mov	r0, r5
 8001c5c:	f7fe fac8 	bl	80001f0 <memchr>
 8001c60:	b108      	cbz	r0, 8001c66 <_printf_i+0x1f2>
 8001c62:	1b40      	subs	r0, r0, r5
 8001c64:	6060      	str	r0, [r4, #4]
 8001c66:	6863      	ldr	r3, [r4, #4]
 8001c68:	6123      	str	r3, [r4, #16]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c70:	e7a8      	b.n	8001bc4 <_printf_i+0x150>
 8001c72:	6923      	ldr	r3, [r4, #16]
 8001c74:	462a      	mov	r2, r5
 8001c76:	4649      	mov	r1, r9
 8001c78:	4640      	mov	r0, r8
 8001c7a:	47d0      	blx	sl
 8001c7c:	3001      	adds	r0, #1
 8001c7e:	d0ab      	beq.n	8001bd8 <_printf_i+0x164>
 8001c80:	6823      	ldr	r3, [r4, #0]
 8001c82:	079b      	lsls	r3, r3, #30
 8001c84:	d413      	bmi.n	8001cae <_printf_i+0x23a>
 8001c86:	68e0      	ldr	r0, [r4, #12]
 8001c88:	9b03      	ldr	r3, [sp, #12]
 8001c8a:	4298      	cmp	r0, r3
 8001c8c:	bfb8      	it	lt
 8001c8e:	4618      	movlt	r0, r3
 8001c90:	e7a4      	b.n	8001bdc <_printf_i+0x168>
 8001c92:	2301      	movs	r3, #1
 8001c94:	4632      	mov	r2, r6
 8001c96:	4649      	mov	r1, r9
 8001c98:	4640      	mov	r0, r8
 8001c9a:	47d0      	blx	sl
 8001c9c:	3001      	adds	r0, #1
 8001c9e:	d09b      	beq.n	8001bd8 <_printf_i+0x164>
 8001ca0:	3501      	adds	r5, #1
 8001ca2:	68e3      	ldr	r3, [r4, #12]
 8001ca4:	9903      	ldr	r1, [sp, #12]
 8001ca6:	1a5b      	subs	r3, r3, r1
 8001ca8:	42ab      	cmp	r3, r5
 8001caa:	dcf2      	bgt.n	8001c92 <_printf_i+0x21e>
 8001cac:	e7eb      	b.n	8001c86 <_printf_i+0x212>
 8001cae:	2500      	movs	r5, #0
 8001cb0:	f104 0619 	add.w	r6, r4, #25
 8001cb4:	e7f5      	b.n	8001ca2 <_printf_i+0x22e>
 8001cb6:	bf00      	nop
 8001cb8:	08001fcd 	.word	0x08001fcd
 8001cbc:	08001fde 	.word	0x08001fde

08001cc0 <memcpy>:
 8001cc0:	440a      	add	r2, r1
 8001cc2:	4291      	cmp	r1, r2
 8001cc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8001cc8:	d100      	bne.n	8001ccc <memcpy+0xc>
 8001cca:	4770      	bx	lr
 8001ccc:	b510      	push	{r4, lr}
 8001cce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001cd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001cd6:	4291      	cmp	r1, r2
 8001cd8:	d1f9      	bne.n	8001cce <memcpy+0xe>
 8001cda:	bd10      	pop	{r4, pc}

08001cdc <memmove>:
 8001cdc:	4288      	cmp	r0, r1
 8001cde:	b510      	push	{r4, lr}
 8001ce0:	eb01 0402 	add.w	r4, r1, r2
 8001ce4:	d902      	bls.n	8001cec <memmove+0x10>
 8001ce6:	4284      	cmp	r4, r0
 8001ce8:	4623      	mov	r3, r4
 8001cea:	d807      	bhi.n	8001cfc <memmove+0x20>
 8001cec:	1e43      	subs	r3, r0, #1
 8001cee:	42a1      	cmp	r1, r4
 8001cf0:	d008      	beq.n	8001d04 <memmove+0x28>
 8001cf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001cf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001cfa:	e7f8      	b.n	8001cee <memmove+0x12>
 8001cfc:	4402      	add	r2, r0
 8001cfe:	4601      	mov	r1, r0
 8001d00:	428a      	cmp	r2, r1
 8001d02:	d100      	bne.n	8001d06 <memmove+0x2a>
 8001d04:	bd10      	pop	{r4, pc}
 8001d06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001d0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001d0e:	e7f7      	b.n	8001d00 <memmove+0x24>

08001d10 <_free_r>:
 8001d10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001d12:	2900      	cmp	r1, #0
 8001d14:	d044      	beq.n	8001da0 <_free_r+0x90>
 8001d16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d1a:	9001      	str	r0, [sp, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f1a1 0404 	sub.w	r4, r1, #4
 8001d22:	bfb8      	it	lt
 8001d24:	18e4      	addlt	r4, r4, r3
 8001d26:	f000 f913 	bl	8001f50 <__malloc_lock>
 8001d2a:	4a1e      	ldr	r2, [pc, #120]	; (8001da4 <_free_r+0x94>)
 8001d2c:	9801      	ldr	r0, [sp, #4]
 8001d2e:	6813      	ldr	r3, [r2, #0]
 8001d30:	b933      	cbnz	r3, 8001d40 <_free_r+0x30>
 8001d32:	6063      	str	r3, [r4, #4]
 8001d34:	6014      	str	r4, [r2, #0]
 8001d36:	b003      	add	sp, #12
 8001d38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001d3c:	f000 b90e 	b.w	8001f5c <__malloc_unlock>
 8001d40:	42a3      	cmp	r3, r4
 8001d42:	d908      	bls.n	8001d56 <_free_r+0x46>
 8001d44:	6825      	ldr	r5, [r4, #0]
 8001d46:	1961      	adds	r1, r4, r5
 8001d48:	428b      	cmp	r3, r1
 8001d4a:	bf01      	itttt	eq
 8001d4c:	6819      	ldreq	r1, [r3, #0]
 8001d4e:	685b      	ldreq	r3, [r3, #4]
 8001d50:	1949      	addeq	r1, r1, r5
 8001d52:	6021      	streq	r1, [r4, #0]
 8001d54:	e7ed      	b.n	8001d32 <_free_r+0x22>
 8001d56:	461a      	mov	r2, r3
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	b10b      	cbz	r3, 8001d60 <_free_r+0x50>
 8001d5c:	42a3      	cmp	r3, r4
 8001d5e:	d9fa      	bls.n	8001d56 <_free_r+0x46>
 8001d60:	6811      	ldr	r1, [r2, #0]
 8001d62:	1855      	adds	r5, r2, r1
 8001d64:	42a5      	cmp	r5, r4
 8001d66:	d10b      	bne.n	8001d80 <_free_r+0x70>
 8001d68:	6824      	ldr	r4, [r4, #0]
 8001d6a:	4421      	add	r1, r4
 8001d6c:	1854      	adds	r4, r2, r1
 8001d6e:	42a3      	cmp	r3, r4
 8001d70:	6011      	str	r1, [r2, #0]
 8001d72:	d1e0      	bne.n	8001d36 <_free_r+0x26>
 8001d74:	681c      	ldr	r4, [r3, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	6053      	str	r3, [r2, #4]
 8001d7a:	4421      	add	r1, r4
 8001d7c:	6011      	str	r1, [r2, #0]
 8001d7e:	e7da      	b.n	8001d36 <_free_r+0x26>
 8001d80:	d902      	bls.n	8001d88 <_free_r+0x78>
 8001d82:	230c      	movs	r3, #12
 8001d84:	6003      	str	r3, [r0, #0]
 8001d86:	e7d6      	b.n	8001d36 <_free_r+0x26>
 8001d88:	6825      	ldr	r5, [r4, #0]
 8001d8a:	1961      	adds	r1, r4, r5
 8001d8c:	428b      	cmp	r3, r1
 8001d8e:	bf04      	itt	eq
 8001d90:	6819      	ldreq	r1, [r3, #0]
 8001d92:	685b      	ldreq	r3, [r3, #4]
 8001d94:	6063      	str	r3, [r4, #4]
 8001d96:	bf04      	itt	eq
 8001d98:	1949      	addeq	r1, r1, r5
 8001d9a:	6021      	streq	r1, [r4, #0]
 8001d9c:	6054      	str	r4, [r2, #4]
 8001d9e:	e7ca      	b.n	8001d36 <_free_r+0x26>
 8001da0:	b003      	add	sp, #12
 8001da2:	bd30      	pop	{r4, r5, pc}
 8001da4:	200000e8 	.word	0x200000e8

08001da8 <sbrk_aligned>:
 8001da8:	b570      	push	{r4, r5, r6, lr}
 8001daa:	4e0e      	ldr	r6, [pc, #56]	; (8001de4 <sbrk_aligned+0x3c>)
 8001dac:	460c      	mov	r4, r1
 8001dae:	6831      	ldr	r1, [r6, #0]
 8001db0:	4605      	mov	r5, r0
 8001db2:	b911      	cbnz	r1, 8001dba <sbrk_aligned+0x12>
 8001db4:	f000 f8bc 	bl	8001f30 <_sbrk_r>
 8001db8:	6030      	str	r0, [r6, #0]
 8001dba:	4621      	mov	r1, r4
 8001dbc:	4628      	mov	r0, r5
 8001dbe:	f000 f8b7 	bl	8001f30 <_sbrk_r>
 8001dc2:	1c43      	adds	r3, r0, #1
 8001dc4:	d00a      	beq.n	8001ddc <sbrk_aligned+0x34>
 8001dc6:	1cc4      	adds	r4, r0, #3
 8001dc8:	f024 0403 	bic.w	r4, r4, #3
 8001dcc:	42a0      	cmp	r0, r4
 8001dce:	d007      	beq.n	8001de0 <sbrk_aligned+0x38>
 8001dd0:	1a21      	subs	r1, r4, r0
 8001dd2:	4628      	mov	r0, r5
 8001dd4:	f000 f8ac 	bl	8001f30 <_sbrk_r>
 8001dd8:	3001      	adds	r0, #1
 8001dda:	d101      	bne.n	8001de0 <sbrk_aligned+0x38>
 8001ddc:	f04f 34ff 	mov.w	r4, #4294967295
 8001de0:	4620      	mov	r0, r4
 8001de2:	bd70      	pop	{r4, r5, r6, pc}
 8001de4:	200000ec 	.word	0x200000ec

08001de8 <_malloc_r>:
 8001de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dec:	1ccd      	adds	r5, r1, #3
 8001dee:	f025 0503 	bic.w	r5, r5, #3
 8001df2:	3508      	adds	r5, #8
 8001df4:	2d0c      	cmp	r5, #12
 8001df6:	bf38      	it	cc
 8001df8:	250c      	movcc	r5, #12
 8001dfa:	2d00      	cmp	r5, #0
 8001dfc:	4607      	mov	r7, r0
 8001dfe:	db01      	blt.n	8001e04 <_malloc_r+0x1c>
 8001e00:	42a9      	cmp	r1, r5
 8001e02:	d905      	bls.n	8001e10 <_malloc_r+0x28>
 8001e04:	230c      	movs	r3, #12
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	2600      	movs	r6, #0
 8001e0a:	4630      	mov	r0, r6
 8001e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e10:	4e2e      	ldr	r6, [pc, #184]	; (8001ecc <_malloc_r+0xe4>)
 8001e12:	f000 f89d 	bl	8001f50 <__malloc_lock>
 8001e16:	6833      	ldr	r3, [r6, #0]
 8001e18:	461c      	mov	r4, r3
 8001e1a:	bb34      	cbnz	r4, 8001e6a <_malloc_r+0x82>
 8001e1c:	4629      	mov	r1, r5
 8001e1e:	4638      	mov	r0, r7
 8001e20:	f7ff ffc2 	bl	8001da8 <sbrk_aligned>
 8001e24:	1c43      	adds	r3, r0, #1
 8001e26:	4604      	mov	r4, r0
 8001e28:	d14d      	bne.n	8001ec6 <_malloc_r+0xde>
 8001e2a:	6834      	ldr	r4, [r6, #0]
 8001e2c:	4626      	mov	r6, r4
 8001e2e:	2e00      	cmp	r6, #0
 8001e30:	d140      	bne.n	8001eb4 <_malloc_r+0xcc>
 8001e32:	6823      	ldr	r3, [r4, #0]
 8001e34:	4631      	mov	r1, r6
 8001e36:	4638      	mov	r0, r7
 8001e38:	eb04 0803 	add.w	r8, r4, r3
 8001e3c:	f000 f878 	bl	8001f30 <_sbrk_r>
 8001e40:	4580      	cmp	r8, r0
 8001e42:	d13a      	bne.n	8001eba <_malloc_r+0xd2>
 8001e44:	6821      	ldr	r1, [r4, #0]
 8001e46:	3503      	adds	r5, #3
 8001e48:	1a6d      	subs	r5, r5, r1
 8001e4a:	f025 0503 	bic.w	r5, r5, #3
 8001e4e:	3508      	adds	r5, #8
 8001e50:	2d0c      	cmp	r5, #12
 8001e52:	bf38      	it	cc
 8001e54:	250c      	movcc	r5, #12
 8001e56:	4629      	mov	r1, r5
 8001e58:	4638      	mov	r0, r7
 8001e5a:	f7ff ffa5 	bl	8001da8 <sbrk_aligned>
 8001e5e:	3001      	adds	r0, #1
 8001e60:	d02b      	beq.n	8001eba <_malloc_r+0xd2>
 8001e62:	6823      	ldr	r3, [r4, #0]
 8001e64:	442b      	add	r3, r5
 8001e66:	6023      	str	r3, [r4, #0]
 8001e68:	e00e      	b.n	8001e88 <_malloc_r+0xa0>
 8001e6a:	6822      	ldr	r2, [r4, #0]
 8001e6c:	1b52      	subs	r2, r2, r5
 8001e6e:	d41e      	bmi.n	8001eae <_malloc_r+0xc6>
 8001e70:	2a0b      	cmp	r2, #11
 8001e72:	d916      	bls.n	8001ea2 <_malloc_r+0xba>
 8001e74:	1961      	adds	r1, r4, r5
 8001e76:	42a3      	cmp	r3, r4
 8001e78:	6025      	str	r5, [r4, #0]
 8001e7a:	bf18      	it	ne
 8001e7c:	6059      	strne	r1, [r3, #4]
 8001e7e:	6863      	ldr	r3, [r4, #4]
 8001e80:	bf08      	it	eq
 8001e82:	6031      	streq	r1, [r6, #0]
 8001e84:	5162      	str	r2, [r4, r5]
 8001e86:	604b      	str	r3, [r1, #4]
 8001e88:	4638      	mov	r0, r7
 8001e8a:	f104 060b 	add.w	r6, r4, #11
 8001e8e:	f000 f865 	bl	8001f5c <__malloc_unlock>
 8001e92:	f026 0607 	bic.w	r6, r6, #7
 8001e96:	1d23      	adds	r3, r4, #4
 8001e98:	1af2      	subs	r2, r6, r3
 8001e9a:	d0b6      	beq.n	8001e0a <_malloc_r+0x22>
 8001e9c:	1b9b      	subs	r3, r3, r6
 8001e9e:	50a3      	str	r3, [r4, r2]
 8001ea0:	e7b3      	b.n	8001e0a <_malloc_r+0x22>
 8001ea2:	6862      	ldr	r2, [r4, #4]
 8001ea4:	42a3      	cmp	r3, r4
 8001ea6:	bf0c      	ite	eq
 8001ea8:	6032      	streq	r2, [r6, #0]
 8001eaa:	605a      	strne	r2, [r3, #4]
 8001eac:	e7ec      	b.n	8001e88 <_malloc_r+0xa0>
 8001eae:	4623      	mov	r3, r4
 8001eb0:	6864      	ldr	r4, [r4, #4]
 8001eb2:	e7b2      	b.n	8001e1a <_malloc_r+0x32>
 8001eb4:	4634      	mov	r4, r6
 8001eb6:	6876      	ldr	r6, [r6, #4]
 8001eb8:	e7b9      	b.n	8001e2e <_malloc_r+0x46>
 8001eba:	230c      	movs	r3, #12
 8001ebc:	603b      	str	r3, [r7, #0]
 8001ebe:	4638      	mov	r0, r7
 8001ec0:	f000 f84c 	bl	8001f5c <__malloc_unlock>
 8001ec4:	e7a1      	b.n	8001e0a <_malloc_r+0x22>
 8001ec6:	6025      	str	r5, [r4, #0]
 8001ec8:	e7de      	b.n	8001e88 <_malloc_r+0xa0>
 8001eca:	bf00      	nop
 8001ecc:	200000e8 	.word	0x200000e8

08001ed0 <_realloc_r>:
 8001ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ed4:	4680      	mov	r8, r0
 8001ed6:	4614      	mov	r4, r2
 8001ed8:	460e      	mov	r6, r1
 8001eda:	b921      	cbnz	r1, 8001ee6 <_realloc_r+0x16>
 8001edc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	f7ff bf81 	b.w	8001de8 <_malloc_r>
 8001ee6:	b92a      	cbnz	r2, 8001ef4 <_realloc_r+0x24>
 8001ee8:	f7ff ff12 	bl	8001d10 <_free_r>
 8001eec:	4625      	mov	r5, r4
 8001eee:	4628      	mov	r0, r5
 8001ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ef4:	f000 f838 	bl	8001f68 <_malloc_usable_size_r>
 8001ef8:	4284      	cmp	r4, r0
 8001efa:	4607      	mov	r7, r0
 8001efc:	d802      	bhi.n	8001f04 <_realloc_r+0x34>
 8001efe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001f02:	d812      	bhi.n	8001f2a <_realloc_r+0x5a>
 8001f04:	4621      	mov	r1, r4
 8001f06:	4640      	mov	r0, r8
 8001f08:	f7ff ff6e 	bl	8001de8 <_malloc_r>
 8001f0c:	4605      	mov	r5, r0
 8001f0e:	2800      	cmp	r0, #0
 8001f10:	d0ed      	beq.n	8001eee <_realloc_r+0x1e>
 8001f12:	42bc      	cmp	r4, r7
 8001f14:	4622      	mov	r2, r4
 8001f16:	4631      	mov	r1, r6
 8001f18:	bf28      	it	cs
 8001f1a:	463a      	movcs	r2, r7
 8001f1c:	f7ff fed0 	bl	8001cc0 <memcpy>
 8001f20:	4631      	mov	r1, r6
 8001f22:	4640      	mov	r0, r8
 8001f24:	f7ff fef4 	bl	8001d10 <_free_r>
 8001f28:	e7e1      	b.n	8001eee <_realloc_r+0x1e>
 8001f2a:	4635      	mov	r5, r6
 8001f2c:	e7df      	b.n	8001eee <_realloc_r+0x1e>
	...

08001f30 <_sbrk_r>:
 8001f30:	b538      	push	{r3, r4, r5, lr}
 8001f32:	4d06      	ldr	r5, [pc, #24]	; (8001f4c <_sbrk_r+0x1c>)
 8001f34:	2300      	movs	r3, #0
 8001f36:	4604      	mov	r4, r0
 8001f38:	4608      	mov	r0, r1
 8001f3a:	602b      	str	r3, [r5, #0]
 8001f3c:	f7fe fc5e 	bl	80007fc <_sbrk>
 8001f40:	1c43      	adds	r3, r0, #1
 8001f42:	d102      	bne.n	8001f4a <_sbrk_r+0x1a>
 8001f44:	682b      	ldr	r3, [r5, #0]
 8001f46:	b103      	cbz	r3, 8001f4a <_sbrk_r+0x1a>
 8001f48:	6023      	str	r3, [r4, #0]
 8001f4a:	bd38      	pop	{r3, r4, r5, pc}
 8001f4c:	200000f0 	.word	0x200000f0

08001f50 <__malloc_lock>:
 8001f50:	4801      	ldr	r0, [pc, #4]	; (8001f58 <__malloc_lock+0x8>)
 8001f52:	f000 b811 	b.w	8001f78 <__retarget_lock_acquire_recursive>
 8001f56:	bf00      	nop
 8001f58:	200000f4 	.word	0x200000f4

08001f5c <__malloc_unlock>:
 8001f5c:	4801      	ldr	r0, [pc, #4]	; (8001f64 <__malloc_unlock+0x8>)
 8001f5e:	f000 b80c 	b.w	8001f7a <__retarget_lock_release_recursive>
 8001f62:	bf00      	nop
 8001f64:	200000f4 	.word	0x200000f4

08001f68 <_malloc_usable_size_r>:
 8001f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f6c:	1f18      	subs	r0, r3, #4
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	bfbc      	itt	lt
 8001f72:	580b      	ldrlt	r3, [r1, r0]
 8001f74:	18c0      	addlt	r0, r0, r3
 8001f76:	4770      	bx	lr

08001f78 <__retarget_lock_acquire_recursive>:
 8001f78:	4770      	bx	lr

08001f7a <__retarget_lock_release_recursive>:
 8001f7a:	4770      	bx	lr

08001f7c <_init>:
 8001f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f7e:	bf00      	nop
 8001f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f82:	bc08      	pop	{r3}
 8001f84:	469e      	mov	lr, r3
 8001f86:	4770      	bx	lr

08001f88 <_fini>:
 8001f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f8a:	bf00      	nop
 8001f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f8e:	bc08      	pop	{r3}
 8001f90:	469e      	mov	lr, r3
 8001f92:	4770      	bx	lr
